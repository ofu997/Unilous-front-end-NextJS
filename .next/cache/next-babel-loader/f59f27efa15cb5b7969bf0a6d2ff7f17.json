{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport resStyle from '../styles/pages/results.module.css';\nimport Post from '../components/post/Post';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SEARCH_POSTS } from '../src/schemas/queries';\nimport { addPosts } from '../redux/reducers/posts';\nimport Link from 'next/link';\nimport Loading from '../components/Loading';\nimport { palletteGenerator } from '../src/functions/functions';\nimport { toggleStretchLayout } from '../redux/reducers/stretchLayout';\nimport { setEventSearch } from '../redux/reducers/eventSearch';\nimport { bindActionCreators } from 'redux';\n\nvar Results = function Results(props) {\n  if (false) return __jsx(\"h1\", {\n    className: resStyle.test\n  }, \"rendering\");else {\n    var currentIds = props.posts ? props.posts.map(function (p) {\n      return p._id;\n    }) : [];\n\n    var _useState = useState(false),\n        scrollAtBottom = _useState[0],\n        setScrollAtBottom = _useState[1];\n\n    var decodedSearch = decodeURIComponent(props.query);\n    var SPQuery = useQuery(SEARCH_POSTS, {\n      variables: {\n        filterString: '',\n        postIds: currentIds,\n        eventQuery: props.eventSearch\n      }\n    });\n\n    var moreResults = function moreResults() {\n      if (SPQuery.data && SPQuery.data.searchPosts === null) {\n        return false;\n      }\n\n      return true;\n    };\n\n    if (window.innerHeight + window.scrollY > document.body.offsetHeight - 100 && !scrollAtBottom) {\n      setScrollAtBottom(true);\n    }\n\n    if (window.innerHeight + window.scrollY <= document.body.offsetHeight - 100 && scrollAtBottom) {\n      setScrollAtBottom(false);\n    }\n\n    var triggerWhenScroll = function triggerWhenScroll() {\n      if (window.innerHeight + window.scrollY > document.body.offsetHeight - 100 && !scrollAtBottom) {\n        setScrollAtBottom(true);\n      }\n\n      if (window.innerHeight + window.scrollY <= document.body.offsetHeight - 100 && scrollAtBottom) {\n        setScrollAtBottom(false);\n      }\n    };\n\n    window.addEventListener('scroll', triggerWhenScroll, false);\n\n    var postChangeConditions = function postChangeConditions(query, reducer) {\n      if (!scrollAtBottom) return false;\n      if (!query) return false;\n      if (!query.searchPosts) return false;\n\n      if (!reducer) {\n        return true;\n      }\n\n      var queryTitles = query.searchPosts.map(function (i) {\n        return i.title;\n      });\n      var reducerTitles = reducer.map(function (i) {\n        return i.title;\n      });\n\n      var _iterator = _createForOfIteratorHelper(queryTitles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var title = _step.value;\n\n          if (!reducerTitles.includes(title)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    };\n\n    var postsSearched = postChangeConditions(SPQuery.data, props.posts) ? SPQuery.data.searchPosts : null;\n    useEffect(function () {\n      if (postsSearched && !props.posts) {\n        props.addPosts(SPQuery.data.searchPosts);\n        setScrollAtBottom(false);\n      }\n\n      if (postsSearched && props.posts) {\n        if (postsSearched.length > 0) {\n          if (!props.posts.map(function (p) {\n            return p._id;\n          }).includes(postsSearched[0]._id)) {\n            props.addPosts(SPQuery.data.searchPosts);\n            setScrollAtBottom(false);\n          }\n        }\n      }\n    }, [SPQuery, props.addPosts, props, postsSearched]);\n\n    if (!props.posts) {\n      return __jsx(\"div\", null, __jsx(\"div\", {\n        style: {\n          height: '5vh'\n        }\n      }), __jsx(Loading, null));\n    }\n\n    var eventQuery = props.eventSearch;\n\n    var eventKeys = function eventKeys() {\n      if (eventQuery === 'COVID-19') {\n        return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response'];\n      }\n\n      if (eventQuery === '2020 Election') {\n        return ['election', 'democrat', 'republican', 'vote'];\n      }\n\n      return null;\n    };\n\n    var postToShow = function postToShow(post, eventKeys) {\n      if (eventKeys) {\n        var _iterator2 = _createForOfIteratorHelper(eventKeys),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var keyWord = _step2.value;\n\n            if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\n              if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return false;\n      }\n\n      if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true;\n\n      var _iterator3 = _createForOfIteratorHelper(post.skillNames),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var skill = _step3.value;\n          if (decodedSearch.includes(skill)) return true;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return false;\n    };\n\n    var postsToShow = props.posts;\n    postsToShow = postsToShow.map(function (p) {\n      return __jsx(Post, {\n        stretch: props.stretchLayout,\n        key: \"post\".concat(p._id),\n        post: p\n      });\n    });\n    var pallette = palletteGenerator('rgb(40,40,40)').colorPallette;\n    var layoutBtnClass = props.stretchLayout ? resStyle.layoutButtonGrid : resStyle.layoutButtonStretch;\n    var layoutClass = !props.stretchLayout ? resStyle.resultsContentGrid : resStyle.resultsContentStretch;\n    var eventsList = [{\n      name: 'COVID-19',\n      color: 'rgb(237,32,40)',\n      iconB: '/svg/events/virusB.svg',\n      iconW: '/svg/events/virusW.svg',\n      iconC: '/svg/events/virusC.svg'\n    }, {\n      name: '2020 Election',\n      color: 'rgb(255,0,255)',\n      iconB: '/svg/events/usaB.svg',\n      iconW: '/svg/events/usaW.svg',\n      iconC: '/svg/events/usaC.svg'\n    }];\n    var eventsHTML = eventsList.map(function (e) {\n      return e.name === props.eventSearch ? __jsx(\"div\", {\n        className: resStyle.eventSelected,\n        onClick: function onClick() {\n          return props.setEventSearch(null);\n        },\n        style: {\n          borderColor: e.color,\n          backgroundColor: e.color\n        },\n        key: \"EV\".concat(e.name)\n      }, __jsx(\"img\", {\n        src: e.iconW,\n        className: resStyle.eventImage,\n        alt: e.name\n      }), __jsx(\"h3\", {\n        className: resStyle.eventText\n      }, e.name)) : __jsx(\"div\", {\n        className: resStyle.event,\n        onClick: function onClick() {\n          return props.setEventSearch(e.name);\n        },\n        style: {\n          borderColor: e.color,\n          color: e.color\n        },\n        key: \"EV\".concat(e.name)\n      }, __jsx(\"img\", {\n        src: e.iconC,\n        className: resStyle.eventImage,\n        alt: e.name\n      }), __jsx(\"h3\", {\n        className: resStyle.eventText\n      }, e.name));\n    });\n    var eventsContainerClass = props.eventSearch ? resStyle.ECActive : null;\n    var showLoading = moreResults() ? __jsx(Loading, null) : __jsx(\"h3\", {\n      style: {\n        opacity: '0.8'\n      }\n    }, \"no more posts\");\n    return __jsx(\"div\", {\n      className: \"home-wrapper\"\n    }, __jsx(\"div\", {\n      className: resStyle.resultsContainer\n    }, __jsx(Link, {\n      href: \"/PostFormPage\",\n      className: \"\".concat(resStyle.formContainerExpand, \" standard-hover neutralize-link\"),\n      title: props.setTitle\n    }, __jsx(\"img\", {\n      className: resStyle.formExpandIcon,\n      src: pallette.plusIcon,\n      alt: \"team up\"\n    })), __jsx(\"div\", {\n      className: \"navbar-height\"\n    }), __jsx(\"h2\", {\n      className: resStyle.secondaryTitle\n    }, \"events\"), __jsx(\"div\", {\n      className: \"\".concat(resStyle.eventsContainer, \" \").concat(eventsContainerClass)\n    }, eventsHTML), __jsx(\"div\", {\n      onClick: function onClick() {\n        return props.toggleStretchLayout(!props.stretchLayout);\n      },\n      className: resStyle.layoutWrapper\n    }, __jsx(\"div\", {\n      className: resStyle.layoutContainer\n    }, __jsx(\"div\", {\n      className: \"layoutButton \".concat(layoutBtnClass)\n    }, __jsx(\"div\", {\n      className: resStyle.layoutBox\n    }), __jsx(\"div\", {\n      className: resStyle.layoutBox\n    }), __jsx(\"div\", {\n      className: resStyle.layoutBox\n    }), __jsx(\"div\", {\n      className: resStyle.layoutBox\n    })))), __jsx(\"div\", null), __jsx(\"div\", {\n      className: \"resultsContent \".concat(layoutClass)\n    }, postsToShow), __jsx(\"div\", {\n      style: {\n        position: 'relative',\n        height: '400px'\n      }\n    }, showLoading)));\n  }\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//         posts: state.posts,\n//         search: state.search,\n//         stretchLayout: state.stretchLayout,\n//         eventSearch: state.eventSearch,\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { addPosts, toggleStretchLayout, setEventSearch }\n// )(Results)\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    posts: state.posts,\n    stretchLayout: state.stretchLayout,\n    eventSearch: state.eventSearch\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addPosts: bindActionCreators(addPosts, dispatch),\n    toggleStretchLayout: bindActionCreators(toggleStretchLayout, dispatch),\n    setEventSearch: bindActionCreators(setEventSearch, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","map":null,"metadata":{},"sourceType":"module"}