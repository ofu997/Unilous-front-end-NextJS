{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { useMutation } from '@apollo/react-hooks';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Layout from '../../components/Layout';\nimport PostSmallList from '../../components/post/PostSmallList';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport ReferenceLink from '../../components/text-field/ReferenceLink';\nimport { resetAlert, setAlert } from '../../redux/reducers/alertNotif';\nimport { palletteGenerator, triggerAlert, useField } from '../../src/functions/functions';\nimport { MAKE_NOTIFICATION } from '../../src/schemas/mutations';\nimport UP from '../../styles/pages/userPage.module.css';\nvar UserPage = withRouter(function (props) {\n  var currentUser = props.user;\n  var message = useField('text');\n\n  var onError = function onError(e) {\n    var eMessage = e.message;\n\n    if (eMessage.includes('Path `message` (')) {\n      triggerAlert('warning', \"message$: message of \".concat(message.fields.value.length, \" characters cannot be more than 800 characters\"), props.setAlert, props.resetAlert);\n    }\n  };\n\n  var _useMutation = useMutation(MAKE_NOTIFICATION, {\n    onError: onError\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      sendMessage = _useMutation2[0];\n\n  var handleMessage = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (message.fields.value.length) {\n                _context.next = 3;\n                break;\n              }\n\n              triggerAlert('warning', \"message$: message field is required\", props.setAlert, props.resetAlert);\n              return _context.abrupt(\"return\", null);\n\n            case 3:\n              _context.next = 5;\n              return sendMessage({\n                variables: {\n                  userFromId: props.currentUser._id,\n                  userToId: currentUser._id,\n                  message: message.fields.value\n                }\n              });\n\n            case 5:\n              result = _context.sent;\n\n              if (result) {\n                message.reset();\n                triggerAlert('success', \"sent: message has been sent to \".concat(currentUser.username), props.setAlert, props.resetAlert);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleMessage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette; // console.log('props.currentUser', props.currentUser); \n  // console.log(typeof props.currentUser)\n  // console.log('page username: ' + currentUser.username)\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"\".concat(currentUser.username, \" | Unilous user\")), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.imgur.com/6z9eNzV.png\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"\".concat(currentUser.username, \" | Unilous user\"),\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\".concat(currentUser.username, \" has \").concat(currentUser.posts.length, \" projects in need of a team team.\"),\n    key: \"description\"\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\".concat(currentUser.username, \" has \").concat(currentUser.posts.length, \" projects in need of a team team.\"),\n    key: \"description\"\n  })), __jsx(\"div\", {\n    className: UP.UPContainer\n  }, __jsx(\"div\", {\n    className: \"navbar-height\",\n    style: {\n      gridColumn: '1/3'\n    }\n  }), __jsx(\"div\", {\n    className: UP.UPContent\n  }, __jsx(\"div\", {\n    className: UP.UPTitleContainer\n  }, __jsx(\"img\", {\n    className: UP.UPTitleIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\"\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle\n  }, currentUser.username)), __jsx(\"h3\", {\n    className: UP.UPTitle,\n    style: {\n      opacity: '0.8'\n    }\n  }, \"profile link\"), __jsx(ReferenceLink, {\n    rl: currentUser.referenceLink\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle\n  }, \"posts\"), __jsx(\"div\", {\n    className: UP.UPPostsContainer\n  }, __jsx(PostSmallList, {\n    posts: currentUser.posts\n  }))), props.currentUser !== currentUser.username && __jsx(FormContainer, {\n    pallette: pallette\n  }, __jsx(\"h3\", {\n    className: \"form-title\"\n  }, \"contact \", currentUser.username), __jsx(\"h4\", {\n    className: \"form-title-secondary\"\n  }, \"message\"), __jsx(\"div\", {\n    className: \"form-field-container\"\n  }, __jsx(\"textarea\", _extends({\n    className: \"form-field\"\n  }, message.fields))), __jsx(\"div\", {\n    className: \"form-submit-button-container\"\n  }, __jsx(\"h4\", {\n    onClick: function onClick() {\n      return handleMessage();\n    },\n    className: \"form-submit-button\"\n  }, \"send\")))));\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    alertNotif: state.alertNotif,\n    currentUser: state.currentUser\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport var __N_SSG = true;\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css","map":null,"metadata":{},"sourceType":"module"}