{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks';\nimport { REMOVE_SAVED_POST } from '../../src/schemas/mutations';\nimport { setCurrentUserPosts, setCurrentUserSP } from '../../redux/reducers/currentUser';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport { triggerAlert, palletteGenerator } from '../../src/functions/functions';\nimport PT from '../../styles/post.module.css';\n\nconst PostSmall = props => {\n  const handleError = e => {\n    console.log(e);\n  }; // const [ deletePostMutation ] = useMutation(DELETE_POST, {\n  //     onError: handleError\n  // })\n\n\n  const [removeSPMutation] = useMutation(REMOVE_SAVED_POST, {\n    onError: handleError\n  });\n  const p = props.post;\n  const user = props.post.user ? props.post.user.username : props.user;\n  const pallette = palletteGenerator(p.color).colorPallette; // const handleRemove = async () => {\n  //     const result = await deletePostMutation({\n  //         variables: {postId: props.post._id}\n  //     })\n  //     if (result) {\n  //         props.setCurrentUserPosts(props.currentUser.posts.filter(p => p._id !== props.post._id))\n  //         triggerAlert('danger', `deleted $: deleted post '${p.title}'`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n\n  const handleSaveRemove = async () => {\n    const result = await removeSPMutation({\n      variables: {\n        user: props.currentUser._id,\n        postId: p._id\n      }\n    });\n\n    if (result) {\n      const newSavedPosts = props.currentUser.savedPosts.filter(post => post._id !== p._id);\n      props.setCurrentUserSP(newSavedPosts);\n      triggerAlert('danger', `unfollowed$: unfollowed post '${p.title}'`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  if (props.type === 'saved') {\n    return __jsx(\"div\", {\n      className: PT.postWrapperSm\n    }, __jsx(\"div\", {\n      className: PT.postColorIndicator,\n      style: {\n        backgroundColor: pallette.color\n      }\n    }), __jsx(\"div\", {\n      className: PT.postContainer\n    }, __jsx(\"div\", {\n      className: PT.postHeader\n    }, __jsx(Link, {\n      href: \"/user/[username]\",\n      as: `/user/${encodeURIComponent(user)}`\n    }, __jsx(\"a\", {\n      className: `${PT.PHUser} neutralize-link`\n    }, __jsx(\"img\", {\n      className: PT.PHUIcon,\n      src: \"/svg/userB.svg\",\n      alt: \"user\"\n    }), __jsx(\"div\", null, user)))), __jsx(Link, {\n      href: \"/post/[title]\",\n      as: `/post/${encodeURIComponent(p.title)}`\n    }, __jsx(\"a\", {\n      className: \"neutralize-link\"\n    }, __jsx(\"h3\", {\n      className: PT.postTitle,\n      style: {\n        marginBottom: '7px'\n      }\n    }, p.title)))), __jsx(\"div\", {\n      onClick: () => handleSaveRemove(),\n      className: PT.postSmRemove\n    }, \"x\"));\n  }\n\n  if (props.currentUser) {\n    if (user === props.currentUser.username) {\n      return __jsx(\"div\", {\n        className: PT.postWrapperSm\n      }, __jsx(\"div\", {\n        className: PT.postColorIndicator,\n        style: {\n          backgroundColor: pallette.color\n        }\n      }), __jsx(\"div\", {\n        className: PT.postContainer\n      }, __jsx(\"div\", {\n        className: PT.postHeader\n      }, __jsx(Link, {\n        href: \"/user/[username]\",\n        as: `/user/${encodeURIComponent(user)}`\n      }, __jsx(\"a\", {\n        className: `${PT.PHUser} neutralize-link`\n      }, __jsx(\"img\", {\n        className: PT.PHUIcon,\n        src: \"/svg/userB.svg\",\n        alt: \"user\"\n      }), __jsx(\"div\", null, user)))), __jsx(Link, {\n        href: \"/post/[title]\",\n        as: `/post/${encodeURIComponent(p.title)}`\n      }, __jsx(\"a\", {\n        className: \"neutralize-link\"\n      }, __jsx(\"h3\", {\n        className: PT.postTitle,\n        style: {\n          marginBottom: '7px'\n        }\n      }, p.title)))));\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: PT.postWrapperSm,\n    style: {\n      gridTemplateColumns: '8px auto'\n    }\n  }, __jsx(\"div\", {\n    className: PT.postColorIndicator,\n    style: {\n      backgroundColor: pallette.color\n    }\n  }), __jsx(\"div\", {\n    className: PT.postContainer\n  }, __jsx(\"div\", {\n    className: PT.postHeader\n  }, __jsx(Link, {\n    href: \"/user/[username]\",\n    as: `/user/${encodeURIComponent(user)}`\n  }, __jsx(\"a\", {\n    className: `${PT.PHUser} neutralize-link`\n  }, __jsx(\"img\", {\n    className: PT.PHUIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\"\n  }), __jsx(\"div\", null, user)))), __jsx(Link, {\n    href: \"/post/[title]\",\n    as: `/post/${encodeURIComponent(p.title)}`\n  }, __jsx(\"a\", {\n    className: \"neutralize-link\"\n  }, __jsx(\"h3\", {\n    className: PT.postTitle,\n    style: {\n      marginBottom: '7px'\n    }\n  }, p.title)))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCurrentUserPosts,\n  setCurrentUserSP,\n  setAlert,\n  resetAlert\n})(PostSmall);","map":null,"metadata":{},"sourceType":"module"}