{"ast":null,"code":"var __jsx = React.createElement;\nimport { useQuery } from '@apollo/react-hooks';\nimport Link from 'next/link';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { setCurrentUser } from '../../../redux/reducers/currentUser';\nimport { clearToken } from '../../../redux/reducers/token';\nimport { FIND_USER } from '../../../src/schemas/queries';\nimport UR from '../../../styles/user/user.module.css';\nimport UserNotifList from '../utilities/UserNotifList';\nimport UserSP from '../utilities/UserSP';\n\nvar Logged = function Logged(props) {\n  var _useState = useState(true),\n      showUtilities = _useState[0],\n      setShowUtilities = _useState[1];\n\n  var _useState2 = useState(''),\n      utilityShown = _useState2[0],\n      setUtilityShown = _useState2[1];\n\n  var currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'fakeUser';\n  var userQuery = useQuery(FIND_USER, {\n    variables: {\n      username: currentUserUN\n    }\n  });\n\n  var userQueryConditions = function userQueryConditions() {\n    var query = userQuery.data;\n    var reducer = props.currentUser;\n\n    if (!query) {\n      return null;\n    }\n\n    if (!query.findUser) {\n      return null;\n    }\n\n    if (reducer) {\n      if (query.findUser.username === reducer.username) {\n        return null;\n      }\n    }\n\n    return query.findUser;\n  };\n\n  var userResult = userQueryConditions();\n  useEffect(function () {\n    if (userResult) {\n      props.setCurrentUser(userResult);\n    }\n  }, [props, props.currentUser, userResult]);\n\n  if (!props.currentUser) {\n    return __jsx(\"div\", {\n      className: \"\".concat(UR.userContainer, \" \").concat(UR.LGDUserContainer)\n    }, __jsx(\"div\", {\n      className: UR.userOptionsSplitter\n    }, __jsx(\"div\", {\n      className: UR.userIconContainer\n    })), __jsx(\"div\", {\n      className: UR.userBanner\n    }));\n  }\n\n  var logout = function logout() {\n    localStorage.clear();\n    props.clearToken();\n  };\n\n  var changeUtilityShown = function changeUtilityShown(changeTo) {\n    if (changeTo === utilityShown) {\n      setUtilityShown(null);\n    } else {\n      setUtilityShown(changeTo);\n    }\n\n    setShowUtilities(true);\n  };\n\n  var changeShowUtilities = function changeShowUtilities(changeTo) {\n    if (!changeTo) {\n      setShowUtilities(changeTo);\n      setUtilityShown(null);\n    } else {\n      setShowUtilities(changeTo);\n    }\n  };\n\n  var usernameIcon = props.currentUser.username.substr(0, 1).toUpperCase();\n  var iconToShow = showUtilities ? __jsx(Link, {\n    href: \"/user/[username\",\n    as: \"/user/\".concat(encodeURIComponent(props.currentUser.username))\n  }, __jsx(\"a\", {\n    className: \"\".concat(UR.userIconContainer, \" \").concat(UR.UICH, \" neutralize-link\")\n  }, __jsx(\"h1\", {\n    className: \"\".concat(UR.userUsernameIcon, \" \").concat(UR.userIconHover)\n  }, usernameIcon))) : __jsx(Link, {\n    href: \"/user/[username]\",\n    as: \"/user/\".concat(encodeURIComponent(props.currentUser.username))\n  }, __jsx(\"a\", {\n    className: \"user-icon-container UICH\"\n  }, __jsx(\"img\", {\n    src: \"/svg/userW.svg\",\n    className: \"\".concat(UR.userIcon, \" \").concat(UR.userIconHover),\n    alt: \"user\"\n  })));\n  var basicStyles = {\n    user: {\n      className: '',\n      icon: \"/svg/userSB.svg\"\n    },\n    notifications: {\n      className: '',\n      icon: \"/svg/bellB.svg\"\n    },\n    following: {\n      className: '',\n      icon: \"/svg/heartB.svg\"\n    }\n  };\n\n  if (utilityShown === 'user') {\n    basicStyles.user = {\n      className: UR.UUOSelected,\n      icon: \"/svg/userW.svg\"\n    };\n  }\n\n  if (utilityShown === 'notifications') {\n    basicStyles.notifications = {\n      className: UR.UUOSelected,\n      icon: \"/svg/bellW.svg\"\n    };\n  }\n\n  if (utilityShown === 'following') {\n    basicStyles.following = {\n      className: UR.UUOSelected,\n      icon: \"/svg/heartW.svg\"\n    };\n  }\n\n  var pendingNotifStats = props.currentUser && props.currentUser.pendingNotifications > 0 ? [UR.PNBubble, props.currentUser.pendingNotifications] : [null, null];\n  var showInBanner = showUtilities ? __jsx(React.Fragment, null, __jsx(Link, {\n    href: \"/postformpage/\"\n  }, __jsx(\"a\", {\n    className: \"\".concat(UR.UUAddPost, \" \").concat(UR.userUtilityOption, \" neutralize-link\"),\n    style: {\n      gridColumn: '1/3'\n    }\n  }, __jsx(\"img\", {\n    src: \"/svg/plusB.svg\",\n    className: UR.UUAPIcon,\n    alt: \"add post\"\n  }), __jsx(\"h4\", {\n    className: UR.UUAPText\n  }, \"add post\"))), __jsx(Link, {\n    href: \"/user/[username]\",\n    as: \"/user/\".concat(props.currentUser.username)\n  }, __jsx(\"a\", {\n    className: \"\".concat(UR.userUtilityOption, \" \").concat(basicStyles.user.className)\n  }, __jsx(\"img\", {\n    src: basicStyles.user.icon,\n    className: UR.UUIcon,\n    alt: \"user\"\n  }))), __jsx(\"div\", {\n    onClick: function onClick() {\n      return changeUtilityShown('notifications');\n    },\n    className: \"\".concat(UR.userUtilityOption, \" \").concat(UR.PNContainer, \" \").concat(basicStyles.notifications.className)\n  }, __jsx(\"img\", {\n    src: basicStyles.notifications.icon,\n    className: UR.UUIcon,\n    alt: \"notifications\"\n  }), __jsx(\"div\", {\n    className: pendingNotifStats[0]\n  }, pendingNotifStats[1])), __jsx(\"div\", {\n    onClick: function onClick() {\n      return changeUtilityShown('following');\n    },\n    className: \"\".concat(UR.userUtilityOption, \" \").concat(basicStyles.following.className)\n  }, __jsx(\"img\", {\n    src: basicStyles.following.icon,\n    className: UR.UUIcon,\n    alt: \"follow\"\n  })), __jsx(\"div\", {\n    onClick: function onClick() {\n      return logout();\n    },\n    className: \"\".concat(UR.userUtilityOption, \" \").concat(UR.UULogout)\n  }, __jsx(\"img\", {\n    src: \"/svg/exitB.svg\",\n    className: UR.UULogoutIcon,\n    alt: \"log out\"\n  }))) : __jsx(\"div\", {\n    onClick: function onClick() {\n      return changeShowUtilities(!showUtilities);\n    },\n    className: \"\".concat(UR.userUsernameContainer, \" \").concat(UR.SUH)\n  }, __jsx(\"h2\", {\n    className: \"user-username\"\n  }, props.currentUser.username));\n  var showBubble = showUtilities ? __jsx(\"div\", null) : __jsx(\"div\", {\n    onClick: function onClick() {\n      return changeUtilityShown('notifications');\n    },\n    className: UR.userNotificationBubble\n  }, \"4\");\n  var showUtilityContent = utilityShown ? {\n    display: 'block'\n  } : {\n    display: 'none'\n  };\n\n  var utilityContent = function utilityContent() {\n    // if (utilityShown === 'user') {\n    //     return <div><UserInfo /></div>\n    // }\n    if (utilityShown === 'notifications') {\n      return __jsx(UserNotifList, null);\n    }\n\n    if (utilityShown === 'following') {\n      return __jsx(UserSP, null);\n    }\n\n    return null;\n  };\n\n  return __jsx(\"div\", {\n    className: \"\".concat(UR.userContainer, \" \").concat(UR.LGDUserContainer)\n  }, __jsx(\"div\", {\n    className: UR.userOptionsSplitter\n  }, iconToShow), __jsx(\"div\", {\n    className: UR.userBanner\n  }, showInBanner), showBubble, __jsx(\"div\", {\n    className: UR.UUUtilitiesSplitter,\n    style: showUtilityContent\n  }), __jsx(\"div\", {\n    className: UR.UUContentContainer,\n    style: showUtilityContent\n  }, __jsx(\"h3\", null, utilityShown), utilityContent()));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearToken: bindActionCreators(clearToken, dispatch),\n    setCurrentUser: bindActionCreators(setCurrentUser, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logged);","map":null,"metadata":{},"sourceType":"module"}