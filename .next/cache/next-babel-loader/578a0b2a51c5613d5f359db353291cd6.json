{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useMutation } from '@apollo/react-hooks';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { resetAlert, setAlert } from '../../../redux/reducers/alertNotif';\nimport { triggerAlert, useField } from '../../../src/functions/functions';\nimport { CREATE_USER } from '../../../src/schemas/mutations';\nimport UR from '../../../styles/user/user.module.css';\nimport InputHeader from '../../text-field/InputHeader';\n\nconst Register = props => {\n  const username = useField('text');\n  const password = useField('password');\n  const rePassword = useField('password');\n  const email = useField('email');\n  const referenceLink = useField('url');\n\n  const onError = e => {\n    let cleanedMessage = e.message;\n    console.log(referenceLink.fields.value);\n    console.log(e.message);\n    if (cleanedMessage.includes('username')) cleanedMessage = `username$: ${username.fields.value} is already being used`;\n    if (cleanedMessage.includes('referenceLink')) cleanedMessage = `reference link$: ${referenceLink.fields.value} is already being used`;\n    if (cleanedMessage.includes('email')) cleanedMessage = `email$: ${email.fields.value} is already being used`;\n    triggerAlert('warning', cleanedMessage, props.setAlert, props.resetAlert);\n  };\n\n  const [registerMutation] = useMutation(CREATE_USER, {\n    onError\n  });\n\n  const handleSumbit = async e => {\n    e.preventDefault();\n\n    if (password.fields.value !== rePassword.fields.value) {\n      triggerAlert('warning', 'password$: password and re-password did not match', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!username.fields.value.length || !password.fields.value.length || !rePassword.fields.value.length || !referenceLink.fields.value.length) {\n      triggerAlert('warning', 'all$: all fields must be filled', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await registerMutation({\n      variables: {\n        username: username.fields.value,\n        password: password.fields.value,\n        referenceLink: referenceLink.fields.value\n      }\n    });\n\n    if (result) {\n      if (props.changeMenuItem) {\n        props.changeMenuItem(null);\n      }\n\n      username.reset();\n      password.reset();\n      rePassword.reset();\n      email.reset();\n      referenceLink.reset();\n      triggerAlert('success', 'registered$: account successfully created', props.setAlert, props.resetAlert);\n      console.log('registered');\n    }\n  };\n\n  const bgStyle = props.noBG ? {\n    backgroundColor: '#282828'\n  } : null;\n  return __jsx(\"div\", {\n    className: UR.userFormContainer,\n    style: bgStyle\n  }, __jsx(\"form\", {\n    className: UR.userForm,\n    onSubmit: e => handleSumbit(e)\n  }, __jsx(InputHeader, {\n    inputFor: \"SI-username\",\n    info: false,\n    title: \"username\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, username.fields, {\n    id: \"SI-username\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-password\",\n    info: false,\n    title: \"password\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, password.fields, {\n    id: \"SI-password\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-rePassword\",\n    info: false,\n    title: \"re-type password\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, rePassword.fields, {\n    id: \"SI-rePassword\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-referenceLink\",\n    info: true,\n    title: \"portfolio link\",\n    color: \"dark\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"link on your user page used as a resume to demonstrate your ability\"), __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, __jsx(\"strong\", null, \"always view another user's portfolio link before working with them\")), __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"sites recommended: \", __jsx(\"strong\", null, \"LinkedIn\"), \", \", __jsx(\"strong\", null, \"Indeed\"), \", \", __jsx(\"strong\", null, \"GitHub\"), \", or \", __jsx(\"strong\", null, \"Facebook\")), __jsx(\"li\", null, \"to further ensure your portfolio link is trustworthy, link your Unilous account from your portfolio link\"))), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, referenceLink.fields, {\n    id: \"SI-referenceLink\"\n  })), __jsx(\"button\", {\n    className: UR.UFSubmit,\n    type: \"submit\"\n  }, __jsx(\"h3\", null, \"register\"))));\n}; //const mapStateToProps = (state) => {\n//\treturn {\n//\t}\n//}\n\n\nexport default connect(null, {\n  setAlert,\n  resetAlert\n})(Register);","map":null,"metadata":{},"sourceType":"module"}