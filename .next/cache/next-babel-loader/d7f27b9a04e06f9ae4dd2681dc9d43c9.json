{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useMutation } from '@apollo/react-hooks';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Layout from '../../components/Layout';\nimport PostSmallList from '../../components/post/PostSmallList';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport ReferenceLink from '../../components/text-field/ReferenceLink';\nimport { apolloClient } from '../../lib/apollo';\nimport { resetAlert, setAlert } from '../../redux/reducers/alertNotif';\nimport { palletteGenerator, triggerAlert, useField } from '../../src/functions/functions';\nimport { MAKE_NOTIFICATION } from '../../src/schemas/mutations';\nimport { ALL_USERS, FIND_USER } from '../../src/schemas/queries';\nimport UP from '../../styles/pages/userPage.module.css';\nconst UserPage = withRouter(props => {\n  const currentUser = props.user;\n  const message = useField('text');\n\n  const onError = e => {\n    const eMessage = e.message;\n\n    if (eMessage.includes('Path `message` (')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n    onError\n  });\n\n  const handleMessage = async () => {\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await sendMessage({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentUser._id,\n        message: message.fields.value\n      }\n    });\n\n    if (result) {\n      message.reset();\n      triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette; // console.log('props.currentUser', props.currentUser); \n  // console.log(typeof props.currentUser)\n  // console.log('page username: ' + currentUser.username)\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, `${currentUser.username} | Unilous user`), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.imgur.com/6z9eNzV.png\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${currentUser.username} | Unilous user`,\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${currentUser.username} has ${currentUser.posts.length} projects in need of a team team.`,\n    key: \"description\"\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${currentUser.username} has ${currentUser.posts.length} projects in need of a team team.`,\n    key: \"description\"\n  })), __jsx(\"div\", {\n    className: UP.UPContainer\n  }, __jsx(\"div\", {\n    className: \"navbar-height\",\n    style: {\n      gridColumn: '1/3'\n    }\n  }), __jsx(\"div\", {\n    className: UP.UPContent\n  }, __jsx(\"div\", {\n    className: UP.UPTitleContainer\n  }, __jsx(\"img\", {\n    className: UP.UPTitleIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\"\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle\n  }, currentUser.username)), __jsx(\"h3\", {\n    className: UP.UPTitle,\n    style: {\n      opacity: '0.8'\n    }\n  }, \"profile link\"), __jsx(ReferenceLink, {\n    rl: currentUser.referenceLink\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle\n  }, \"posts\"), __jsx(\"div\", {\n    className: UP.UPPostsContainer\n  }, __jsx(PostSmallList, {\n    posts: currentUser.posts\n  }))), props.currentUser !== currentUser.username && __jsx(FormContainer, {\n    pallette: pallette\n  }, __jsx(\"h3\", {\n    className: \"form-title\"\n  }, \"contact \", currentUser.username), __jsx(\"h4\", {\n    className: \"form-title-secondary\"\n  }, \"message\"), __jsx(\"div\", {\n    className: \"form-field-container\"\n  }, __jsx(\"textarea\", _extends({\n    className: \"form-field\"\n  }, message.fields))), __jsx(\"div\", {\n    className: \"form-submit-button-container\"\n  }, __jsx(\"h4\", {\n    onClick: () => handleMessage(),\n    className: \"form-submit-button\"\n  }, \"send\")))));\n});\nexport async function getStaticPaths() {\n  const usernamesQuery = await apolloClient.query({\n    query: ALL_USERS\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {\n      username: params.username\n    }\n  }).catch(err => console.log(err));\n  return {\n    props: {\n      user: userQuery.data.findUser\n    }\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    alertNotif: state.alertNotif,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css","map":null,"metadata":{},"sourceType":"module"}