{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { LIST_OF_POSTS } from '../../../src/schemas/queries';\nimport { setCurrentUserSP } from '../../../redux/reducers/currentUser';\nimport PostSmall from '../../post/PostSmall';\nimport Loading from '../../Loading';\n\nconst UserSP = props => {\n  const id_list = props.currentUser.savedPosts.map(p => p._id);\n  const postListQuery = useQuery(LIST_OF_POSTS, {\n    variables: {\n      id_list\n    }\n  });\n\n  const queryConditions = (query, reducer) => {\n    if (!query) return null;\n    if (!query.getListOfPosts) return null;\n    if (!reducer) return query.getListOfPosts;\n    if (reducer && reducer.length > 0 && !reducer[0].title) return query.getListOfPosts;\n    return null;\n  };\n\n  const postList = queryConditions(postListQuery.data, props.currentUser.savedPosts);\n  useEffect(() => {\n    if (postList) {\n      let newPostList = [];\n\n      for (const ind in postList) {\n        newPostList.push(_objectSpread(_objectSpread({}, postList[ind]), {}, {\n          _id: id_list[ind]\n        }));\n      }\n\n      props.setCurrentUserSP(newPostList);\n    }\n  }, [postList, props.setCurrentUserSP, props, id_list]);\n\n  if (props.currentUser.savedPosts.length > 0 && !props.currentUser.savedPosts[0].user) {\n    return __jsx(\"div\", {\n      style: {\n        gridColumn: '1/3'\n      }\n    }, __jsx(\"div\", {\n      style: {\n        height: '5vh'\n      }\n    }), __jsx(Loading, {\n      color: \"white\"\n    }));\n  }\n\n  const allSP = props.currentUser.savedPosts.map(p => __jsx(PostSmall, {\n    post: p,\n    user: p.user.username,\n    type: \"saved\",\n    key: `SP${p.title}`\n  }));\n  return __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      height: '10px'\n    }\n  }), allSP);\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCurrentUserSP\n})(UserSP);","map":null,"metadata":{},"sourceType":"module"}