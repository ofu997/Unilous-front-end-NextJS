{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks'; // import { MAKE_NOTIFICATION, ASK_QUESTION, SAVE_POST } from '../src/schemas/mutations'\n\nimport { FIND_POST, Q_AND_A_NOTIFS, ALL_POSTS, ALL_USERS } from '../src/schemas/queries';\nimport Link from 'next/link'; // import Loading from '../src/components/Loading'\n\nimport ppStyle from '../styles/pages/newPostPage.module.css'; // import userIcon from '../../static/svg/userB.svg'\n// import PostImages from '../src/components/postPage/PostImages'\n// import PostLinks from '../src/components/postPage/PostLinks'\n// import PostQandA from '../src/components/postPage/PostQandA'\n// import InputHeader from '../src/components/text-field/InputHeader'\n// import FormContainer from '../src/components/text-field/FormContainer'\n// import plusIcon from '../../static/svg/plusW.svg'\n// import discordIcon from '../../static/svg/websites/discord.svg'\n// import searchIcon from '../../static/svg/searchWW.svg'\n\nimport { setCurrentUserSP } from '../redux/reducers/currentUser';\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif'; // import { useField, triggerAlert, palletteGenerator } from '../src/functions/functions'\n\nimport { bindActionCreators } from 'redux';\nimport { apolloClient } from '../lib/apollo';\n\nvar PostPage = function PostPage(props) {\n  var Posts = function Posts() {\n    return __jsx(React.Fragment, null, props.posts.map(function (p) {\n      return __jsx(React.Fragment, {\n        key: p.title\n      }, __jsx(Link, {\n        href: \"/post/[title]\",\n        as: \"/post/\".concat(encodeURIComponent(p.title))\n      }, __jsx(\"a\", null, p.title)), __jsx(\"br\", null));\n    }));\n  };\n\n  var Users = function Users() {\n    return __jsx(React.Fragment, null, props.users.map(function (u) {\n      return __jsx(React.Fragment, {\n        key: u.username\n      }, __jsx(Link, {\n        href: \"/user/[username]\",\n        as: \"/user/\".concat(encodeURIComponent(u.username))\n      }, __jsx(\"a\", null, u.username)), __jsx(\"br\", null));\n    }));\n  }; // const [currentPost, setCurrentPost] = useState({\n  //     title: 'Unilous ',\n  //     description: `\n  //     Unilous is a tool for anyone looking to build a team. It expands your network to all of our users so that if there is mutual interest between the post creator and the visitor they can team up. From there the team should be primed to execute whatever the goal of their post may be. Alternatively, it can also serve as a project page for recruiting people outside of Unilous.\n  //     Features\n  //     Unilous central feature is a user's ability to join anotherâ€™s team through their post. This feature streamlines the team-building process.\n  //     The post is how the user communicates his/her idea to visitors. To clarify the description of the idea, Unilous also offers a question and answer feature. It displays all answered posts, this will help clarify the objective of the post when all else fails.\n  //     How Unilous came to be\n  //     I was working on an iteration of Unilous where the objective was far more ambitious than what it is today. As I was working on it I came to understand that to execute the project I could not go about it alone. Consequently, I turned to networking, unfortunately, since my network is somewhat thin I turned to other sites but none of them were effective.\n  //     As a result, the idea dawned on me, using the frame of what I have already built I will fill this void for simplistic team-building sites. This could not only serve other people with similar struggles, but for myself as well, as I (hopefully joined by others in the future) continue to build Unilous into a fantastic product.\n  //     Join Unilous (or any other post)\n  //     1. Register\n  //     2. (on the right side) Pick a skill to which you can contribute\n  //     3. Join!\n  //     Contact us\n  //     Send http://localhost:3000/user/Unilous a message or to contact us directly visit https://www.unilous.com/contact. \n  //     Donate\n  //     Did we help? Feeling generous?\n  //     Help us improve Unilous, support our Patreon https://www.patreon.com/unilous?fan_landing=true        \n  //     `,\n  //     skillNames: ['react (es6)', 'node.js', 'ui/ux designer', 'mopngodb'], skillFills: [0, 0, 0, 0], skillCapacities: [4, 2, 2, 1],\n  //     user: {username: 'Unilous', _id: 'fake'},\n  //     color: 'rgb(40,40,40)',\n  //     team: [],\n  //     referenceLinks: [],\n  //     imageLinks: [],\n  //     time: '1587744163174',\n  //     _id: 'fakest'\n  // })\n  // const [skillExpanded, setSkillExpanded] = useState(null)\n  // const question = useField('text')\n  // const message = useField('text')\n  // const onJoinError = (e) => {\n  //     if (e.message.includes('is longer than the maximum allowed length')) {\n  //         triggerAlert('warning', `message$: message of ${message.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  // const onQuestionError = (e) => {\n  //     if (e.message.includes('is longer than the maximum allowed length')) {\n  //         triggerAlert('warning', `question$: question of ${question.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  // const onFollowError = (e) => {\n  //     console.log(e)\n  // }\n  // const [followMutation] = useMutation(SAVE_POST, {\n  //     onError: onFollowError\n  // })\n  // const [makeNotification] = useMutation(MAKE_NOTIFICATION, {\n  //     onError: onJoinError\n  // })\n  // const [askQuestion] = useMutation(ASK_QUESTION, {\n  //     onError: onQuestionError\n  // })\n  // const handleFollow = async () => {\n  //     if (!props.token) {\n  //         triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n  //     }\n  //     const result = await followMutation({\n  //         variables: {\n  //             user: props.currentUser._id,\n  //             postId: currentPost._id\n  //         }\n  //     })\n  //     if (result) {\n  //         props.setCurrentUserSP(props.currentUser.savedPosts.concat(currentPost))\n  //         triggerAlert('success', 'followed$: you are now following this post', props.setAlert, props.resetAlert)\n  //     }\n  // }\n  // const qandaQuery = useQuery(Q_AND_A_NOTIFS, {\n  //     variables: {title: decodeURIComponent(props.postTitle)}\n  // })\n  // const postQuery = useQuery(FIND_POST, {\n  //     variables: {title: decodeURIComponent(props.postTitle)}\n  // })\n  // const qandaChangeConditions = () => {\n  //     const query = qandaQuery.data\n  //     const reducer = currentPost\n  //     if (!query) return null\n  //     if (!query.searchAnsweredQToPost) return null\n  //     if (!reducer) return null\n  //     if (reducer.qanda) return null\n  //     return query.searchAnsweredQToPost\n  // }\n  // const postChangeConditions = () => {\n  //     const query = postQuery.data\n  //     const reducer = currentPost\n  //     if (!query) return null\n  //     if (!query.findPost) return null\n  //     if (reducer) {\n  //         if (reducer.title === query.findPost.title) return null\n  //     }\n  //     return query.findPost\n  // }\n  // const qanda = qandaChangeConditions()\n  // const post = postChangeConditions()\n  // useEffect(() => {\n  //     if (qanda) {\n  //         setCurrentPost({...currentPost, qanda})\n  //     }\n  //     if (post) {\n  //         setCurrentPost(post)\n  //     }\n  // }, [qanda, post, setCurrentPost, currentPost])\n  // if (!currentPost) {\n  //     return <Loading />\n  // }\n  // let cleanedTime = new Date(Number(currentPost.time))\n  // cleanedTime = cleanedTime.toString().split(' ')\n  // // cleanedTime = cleanedTime.slice(1,4).join(' ') + ' ' + cleanedTime[4].split(':').slice(0,2).join(':')\n  // cleanedTime = cleanedTime.slice(1,3).join(' ') + ', ' + cleanedTime[3]\n  // let qandaList = currentPost.qanda ? currentPost.qanda.map(i => <PostQandA qanda={i} key={`QandA${i.question}`} />) : <Loading />\n  // qandaList = qandaList.length ? qandaList : <div className={ppStyle.qanda-text}>no question and answer pairs yet</div>\n  // const skillsHTML = []\n  // const questionStyle = skillExpanded ? {display: 'none'} : {display: 'block'}\n  // const handleNotification = async (proposedContribution) => {\n  //     if (!props.currentUser) {\n  //         triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (!message.fields.value.length) {\n  //         triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     const result = await makeNotification({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentPost.user._id,\n  //             message: message.fields.value,\n  //             postId: currentPost._id,\n  //             proposedContribution\n  //         }\n  //     })\n  //     if (result) {\n  //         setSkillExpanded(null)\n  //         message.reset()\n  //         triggerAlert('success', `sent$: (check your answered notifications for the response) request has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  // for (const ins in currentPost.skillNames) {\n  //     const skillName = currentPost.skillNames[ins]\n  //     const skillFill = currentPost.skillFills[ins]\n  //     const skillCap = currentPost.skillCapacities[ins]\n  //     const messageStyle = skillExpanded === skillName ? {display: 'block'} : {display: 'none'}\n  //     const buttonToShown = skillExpanded === skillName ?\n  //         <h4 onClick={() => setSkillExpanded(null)} className={ppStyle.PPS-button-exit}>X</h4>\n  //         :\n  //         skillFill < skillCap ?\n  //             <h4 onClick={() => setSkillExpanded(skillName)} className={ppStyle.PPS-button-exit}>join</h4>\n  //             :\n  //             <h4 className={ppStyle.PPS-button-disabled}>join</h4>\n  //     const skillProposition = Array(currentPost.skillNames.length).fill(0)\n  //     skillProposition[ins] = 1\n  //     skillsHTML.push( \n  //         <div className={ppStyle.PPS-skill} key={`PPSS${skillName}`}>\n  //             <div className={ppStyle.PPS-division} />\n  //             <p className={ppStyle.PPS-skill-name}>{skillName}</p>\n  //             <div className={ppStyle.PPS-skill-secondary}>\n  //                 <p className={ppStyle.PPS-skill-info}>{skillFill}/{skillCap}</p>\n  //                 {buttonToShown}\n  //             </div>\n  //             <div className={ppStyle.PPS-skill-form} style={messageStyle}>\n  //                 <div className={ppStyle.PPS-title}>\n  //                     <InputHeader inputFor={ppStyle.PPS-message} info={false} title=\"message\" color=\"white\" />\n  //                 </div>\n  //                 <div className={ppStyle.PPS-input-container}>\n  //                     <textarea className={ppStyle.PPS-input} id=\"PPS-message\" {...message.fields}></textarea>\n  //                 </div>\n  //                 <div className=\"PPC-submit-container\">\n  //                     {<h4 onClick={() => handleNotification(skillProposition)} className={ppStyle.PPS-button} style={{borderColor: currentPost.color}}>join</h4>}\n  //                 </div>\n  //             </div>\n  //         </div>\n  //     )\n  // }\n  // const handleQuestion = async () => {\n  //     if (!props.currentUser) {\n  //         triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     if (!question.fields.value.length) {\n  //         triggerAlert('warning', `question$: question field is required`, props.setAlert, props.resetAlert)\n  //         return null\n  //     }\n  //     const result = await askQuestion({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentPost.user._id,\n  //             postId: currentPost._id,\n  //             question: question.fields.value\n  //         }\n  //     })\n  //     if (result) {\n  //         question.reset()\n  //         triggerAlert('success', `sent$: (check your answered notifications for the response) question has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  // const pallette = palletteGenerator(currentPost.color).colorPallette\n  // const teamHTML = currentPost.team ? currentPost.team.map(un =>\n  //     <Link href={`/user/${un}`} className={ppStyle.PPC-user-container neutralize-link} key={`PT${un}`}>\n  //         <img className={ppStyle.PPC-user-icon} src='/svg/userB.svg' alt=\"user\" />\n  //         <p className=\"NM\">{un}</p>\n  //     </Link>\n  // ): null\n  // const HomeContent = () => {\n  //     if (props.home) {\n  //         return (\n  //             <div className={ppStyle.home-options}>\n  //                 <Link to=\"/browse/\" className={`${ppStyle.home-option} neutralize-link`} style={{backgroundColor: '#282828'}}>\n  //                     <img src='/svg/searchWW.svg' className={ppStyle.home-option-icon} alt=\"search\" />\n  //                     <h3 className={ppStyle.home-option-text}>browse all</h3>\n  //                 </Link>\n  //                 <Link to=\"/post-form/\" className={`${ppStyle.home-option} neutralize-link`} style={{backgroundColor: 'rgb(52,166,95)'}}>\n  //                     <img src='/svg/plusW.svg' className={ppStyle.home-option-icon} alt=\"add\" />\n  //                     <h3 className={ppStyle.home-option-text}>add project</h3>\n  //                 </Link>\n  //                 <a href=\"https://discord.gg/v7vFc9U\" className={`${ppStyle.home-option} ${ppStyle.home-option-highlight} neutralize-link`} style={{backgroundColor: '#7289DA'}}>\n  //                     <img src='/svg/websites/discord.svg' className={ppStyle.home-option-icon} alt=\"Discord\" />\n  //                     <h3 className={ppStyle.home-option-text}>community discord</h3>\n  //                 </a>\n  //             </div>\n  //         )\n  //     }\n  //     else {\n  //         return null\n  //     }\n  // }\n  // const ModifiedDescription = () => {\n  //     const spacedDis = currentPost.description.split(' ')\n  //     for (const i in spacedDis) {\n  //         if (spacedDis[i].includes('https://')) {\n  //             spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\">${spacedDis[i]}</a>`\n  //         }\n  //         if (spacedDis[i].includes('http://')) {\n  //             spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\">${spacedDis[i]}</a>`\n  //         }\n  //     }\n  //     const finalDis = spacedDis.join(' ')\n  //     return <p className=\"PPC-description\" dangerouslySetInnerHTML={{__html: finalDis}} />\n  // }\n  // const skillCap = currentPost.skillCapacities.reduce((n, t) => t + n, 0)\n  // const skillFill = currentPost.skillFills.reduce((n, t) => t + n, 0)\n  // const titleKeywords = () => {\n  //     let title = currentPost.title\n  //     title = title.split(' ')\n  //     let keywords = title.map(w => {\n  //         if (w.slice(0, 1).toUpperCase() === w.slice(0, 1) && w.slice(0, 1).toLowerCase() === w.slice(0, 1)) return null\n  //         if (w.slice(0, 1).toUpperCase() === w.slice(0, 1)) return w + ','\n  //         return null\n  //     })\n  //     keywords = keywords.length ? keywords.join(' ') : title[0] + ', '\n  //     return keywords\n  // }\n  // <Helmet>\n  //     <title>{currentPost.title}</title>\n  //     <meta name=\"author\" content={currentPost.user.username} />\n  //     <meta name=\"description\" content={`Join the project, be part of \"${currentPost.title}\" team! So far ${skillFill} awesome people have joined, there are only ${skillCap - skillFill} slots left.`} />\n  //     <meta name=\"keywords\" content={`${titleKeywords()} build, team`} />\n  // </Helmet>\n\n\n  return __jsx(\"div\", null, __jsx(\"h1\", {\n    className: ppStyle.test\n  }, \"PostPage\"), __jsx(Posts, null), __jsx(\"br\", null), __jsx(Users, null), __jsx(Link, {\n    href: \"/contact\"\n  }, __jsx(\"a\", null, \"contact\")));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps, \n//     { setAlert, resetAlert, setCurrentUserSP }\n// )(PostPage)\n\n\nPostPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var postsQuery, postQuery, usersQuery;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return apolloClient.query({\n              query: ALL_POSTS\n            }).then(function (res) {\n              return res;\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 2:\n            postsQuery = _context.sent;\n            _context.next = 5;\n            return apolloClient.query({\n              query: ALL_POSTS,\n              variables: {\n                title: 'Unilous'\n              }\n            }).then(function (res) {\n              return res;\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 5:\n            postQuery = _context.sent;\n            _context.next = 8;\n            return apolloClient.query({\n              query: ALL_USERS\n            }).then(function (res) {\n              return res;\n            }).catch(function (err) {\n              return console.log(err);\n            });\n\n          case 8:\n            usersQuery = _context.sent;\n            return _context.abrupt(\"return\", {\n              posts: postsQuery.data.allPosts,\n              post: postQuery.data.findPost,\n              users: usersQuery.data.allUsers\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser,\n    alertNotif: state.alertNotif\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch),\n    setCurrentUserSP: bindActionCreators(setCurrentUserSP, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);","map":null,"metadata":{},"sourceType":"module"}