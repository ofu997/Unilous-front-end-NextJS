{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport resStyle from '../styles/pages/results.module.css';\nimport Post from '../components/post/Post';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SEARCH_POSTS } from '../src/schemas/queries';\nimport { addPosts } from '../redux/reducers/posts';\nimport Link from 'next/link';\nimport Loading from '../components/Loading';\nimport { palletteGenerator } from '../src/functions/functions';\nimport { toggleStretchLayout } from '../redux/reducers/stretchLayout';\nimport { setEventSearch } from '../redux/reducers/eventSearch';\nimport { bindActionCreators } from 'redux';\n\nconst Results = props => {\n  if (true) return __jsx(\"h1\", {\n    className: resStyle.test\n  }, \"rendering\");else {\n    const currentIds = props.posts ? props.posts.map(p => p._id) : [];\n    const {\n      0: scrollAtBottom,\n      1: setScrollAtBottom\n    } = useState(false);\n    const decodedSearch = decodeURIComponent(props.query);\n    const SPQuery = useQuery(SEARCH_POSTS, {\n      variables: {\n        filterString: '',\n        postIds: currentIds,\n        eventQuery: props.eventSearch\n      }\n    });\n\n    const moreResults = () => {\n      if (SPQuery.data && SPQuery.data.searchPosts === null) {\n        return false;\n      }\n\n      return true;\n    };\n\n    if (window.innerHeight + window.scrollY > document.body.offsetHeight - 100 && !scrollAtBottom) {\n      setScrollAtBottom(true);\n    }\n\n    if (window.innerHeight + window.scrollY <= document.body.offsetHeight - 100 && scrollAtBottom) {\n      setScrollAtBottom(false);\n    }\n\n    const triggerWhenScroll = () => {\n      if (window.innerHeight + window.scrollY > document.body.offsetHeight - 100 && !scrollAtBottom) {\n        setScrollAtBottom(true);\n      }\n\n      if (window.innerHeight + window.scrollY <= document.body.offsetHeight - 100 && scrollAtBottom) {\n        setScrollAtBottom(false);\n      }\n    };\n\n    window.addEventListener('scroll', triggerWhenScroll, false);\n\n    const postChangeConditions = (query, reducer) => {\n      if (!scrollAtBottom) return false;\n      if (!query) return false;\n      if (!query.searchPosts) return false;\n\n      if (!reducer) {\n        return true;\n      }\n\n      const queryTitles = query.searchPosts.map(i => i.title);\n      const reducerTitles = reducer.map(i => i.title);\n\n      for (const title of queryTitles) {\n        if (!reducerTitles.includes(title)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    const postsSearched = postChangeConditions(SPQuery.data, props.posts) ? SPQuery.data.searchPosts : null;\n    useEffect(() => {\n      if (postsSearched && !props.posts) {\n        props.addPosts(SPQuery.data.searchPosts);\n        setScrollAtBottom(false);\n      }\n\n      if (postsSearched && props.posts) {\n        if (postsSearched.length > 0) {\n          if (!props.posts.map(p => p._id).includes(postsSearched[0]._id)) {\n            props.addPosts(SPQuery.data.searchPosts);\n            setScrollAtBottom(false);\n          }\n        }\n      }\n    }, [SPQuery, props.addPosts, props, postsSearched]);\n\n    if (!props.posts) {\n      return __jsx(\"div\", null, __jsx(\"div\", {\n        style: {\n          height: '5vh'\n        }\n      }), __jsx(Loading, null));\n    }\n\n    const eventQuery = props.eventSearch;\n\n    const eventKeys = () => {\n      if (eventQuery === 'COVID-19') {\n        return ['covid', 'coronavirus', 'outbreak', 'virus', 'emergency response'];\n      }\n\n      if (eventQuery === '2020 Election') {\n        return ['election', 'democrat', 'republican', 'vote'];\n      }\n\n      return null;\n    };\n\n    const postToShow = (post, eventKeys) => {\n      if (eventKeys) {\n        for (const keyWord of eventKeys) {\n          if (post.description.toLowerCase().includes(keyWord) || post.title.toLowerCase().includes(keyWord)) {\n            if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true;\n          }\n        }\n\n        return false;\n      }\n\n      if (post.title.toLowerCase().includes(decodedSearch.toLowerCase())) return true;\n\n      for (const skill of post.skillNames) {\n        if (decodedSearch.includes(skill)) return true;\n      }\n\n      return false;\n    };\n\n    let postsToShow = props.posts;\n    postsToShow = postsToShow.map(p => __jsx(Post, {\n      stretch: props.stretchLayout,\n      key: `post${p._id}`,\n      post: p\n    }));\n    const pallette = palletteGenerator('rgb(40,40,40)').colorPallette;\n    const layoutBtnClass = props.stretchLayout ? resStyle.layoutButtonGrid : resStyle.layoutButtonStretch;\n    const layoutClass = !props.stretchLayout ? resStyle.resultsContentGrid : resStyle.resultsContentStretch;\n    const eventsList = [{\n      name: 'COVID-19',\n      color: 'rgb(237,32,40)',\n      iconB: '/svg/events/virusB.svg',\n      iconW: '/svg/events/virusW.svg',\n      iconC: '/svg/events/virusC.svg'\n    }, {\n      name: '2020 Election',\n      color: 'rgb(255,0,255)',\n      iconB: '/svg/events/usaB.svg',\n      iconW: '/svg/events/usaW.svg',\n      iconC: '/svg/events/usaC.svg'\n    }];\n    const eventsHTML = eventsList.map(e => e.name === props.eventSearch ? __jsx(\"div\", {\n      className: resStyle.eventSelected,\n      onClick: () => props.setEventSearch(null),\n      style: {\n        borderColor: e.color,\n        backgroundColor: e.color\n      },\n      key: `EV${e.name}`\n    }, __jsx(\"img\", {\n      src: e.iconW,\n      className: resStyle.eventImage,\n      alt: e.name\n    }), __jsx(\"h3\", {\n      className: resStyle.eventText\n    }, e.name)) : __jsx(\"div\", {\n      className: resStyle.event,\n      onClick: () => props.setEventSearch(e.name),\n      style: {\n        borderColor: e.color,\n        color: e.color\n      },\n      key: `EV${e.name}`\n    }, __jsx(\"img\", {\n      src: e.iconC,\n      className: resStyle.eventImage,\n      alt: e.name\n    }), __jsx(\"h3\", {\n      className: resStyle.eventText\n    }, e.name)));\n    const eventsContainerClass = props.eventSearch ? resStyle.ECActive : null;\n    const showLoading = moreResults() ? __jsx(Loading, null) : __jsx(\"h3\", {\n      style: {\n        opacity: '0.8'\n      }\n    }, \"no more posts\");\n    return __jsx(\"div\", {\n      className: \"home-wrapper\"\n    }, __jsx(\"div\", {\n      className: resStyle.resultsContainer\n    }, __jsx(Link, {\n      href: \"/PostFormPage\",\n      className: `${resStyle.formContainerExpand} standard-hover neutralize-link`,\n      title: props.setTitle\n    }, __jsx(\"img\", {\n      className: resStyle.formExpandIcon,\n      src: pallette.plusIcon,\n      alt: \"team up\"\n    })), __jsx(\"div\", {\n      className: \"navbar-height\"\n    }), __jsx(\"h2\", {\n      className: resStyle.secondaryTitle\n    }, \"events\"), __jsx(\"div\", {\n      className: `${resStyle.eventsContainer} ${eventsContainerClass}`\n    }, eventsHTML), __jsx(\"div\", {\n      onClick: () => props.toggleStretchLayout(!props.stretchLayout),\n      className: resStyle.layoutWrapper\n    }, __jsx(\"div\", {\n      className: resStyle.layoutContainer\n    }, __jsx(\"div\", {\n      className: `layoutButton ${layoutBtnClass}`\n    }, __jsx(\"div\", {\n      className: resStyle.layoutBox\n    }), __jsx(\"div\", {\n      className: resStyle.layoutBox\n    }), __jsx(\"div\", {\n      className: resStyle.layoutBox\n    }), __jsx(\"div\", {\n      className: resStyle.layoutBox\n    })))), __jsx(\"div\", null), __jsx(\"div\", {\n      className: `resultsContent ${layoutClass}`\n    }, postsToShow), __jsx(\"div\", {\n      style: {\n        position: 'relative',\n        height: '400px'\n      }\n    }, showLoading)));\n  }\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//         posts: state.posts,\n//         search: state.search,\n//         stretchLayout: state.stretchLayout,\n//         eventSearch: state.eventSearch,\n// \t}\n// }\n// export default connect(\n//     mapStateToProps,\n//     { addPosts, toggleStretchLayout, setEventSearch }\n// )(Results)\n\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts,\n    stretchLayout: state.stretchLayout,\n    eventSearch: state.eventSearch\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addPosts: bindActionCreators(addPosts, dispatch),\n    toggleStretchLayout: bindActionCreators(toggleStretchLayout, dispatch),\n    setEventSearch: bindActionCreators(setEventSearch, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","map":null,"metadata":{},"sourceType":"module"}