{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'; // import { useQuery, useMutation } from '@apollo/react-hooks'\n// import { MAKE_NOTIFICATION } from '../../schemas/mutations'\n\nimport { FIND_USER } from '../src/schemas/queries';\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif';\nimport UP from '../styles/pages/userPage.module.css'; // import PostSmallList from '../post/PostSmallList'\n// import Loading from '../Loading'\n// import FormContainer from '../text-field/FormContainer'\n// import userIcon from '../../static/svg/userB.svg'\n// import ReferenceLink from '../text-field/ReferenceLink'\n// import { palletteGenerator, useField, triggerAlert } from '../../functions/functions'\n\nimport { bindActionCreators } from 'redux';\nimport { apolloClient } from '../lib/apollo';\n\nconst UserPage = props => {\n  //   const [currentUser, setCurrentUser] = useState(null)\n  //   const message = useField('text')\n  //   const decodedUser = decodeURIComponent(props.userUsername)\n  //   const userQuery = useQuery(FIND_USER, {\n  //     variables: {username: decodedUser}\n  //   })\n  //   const onError = (e) => {\n  //     const eMessage = e.message\n  //     if (eMessage.includes('Path `message` (')) {\n  //       triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\n  //     }\n  //   }\n  //   const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n  //     onError\n  //   })\n  //   const handleMessage = async () => {\n  //     if (!message.fields.value.length) {\n  //       triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n  //       return null\n  //     }\n  //     const result = await sendMessage({\n  //         variables: {\n  //             userFromId: props.currentUser._id,\n  //             userToId: currentUser._id,\n  //             message: message.fields.value,\n  //         }\n  //     })\n  //     if (result) {\n  //         message.reset()\n  //         triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n  //   const userConditions = () => {\n  //     const query = userQuery.data\n  //     const reducer = currentUser\n  //     if (!query) return null\n  //     if (!query.findUser) return null\n  //     if (!reducer || reducer.username !== query.username) return query.findUser\n  //     return null\n  //   }\n  //   const user = userConditions()\n  //   useEffect(() => {\n  //     if (user) {\n  //       setCurrentUser(user)\n  //     }\n  //   }, [user, setCurrentUser])\n  //   if (!currentUser) {\n  //     return (\n  //       <div>\n  //           <div style={{height: '15vh'}}/>\n  //           <Loading />\n  //       </div>\n  //     )\n  //   }\n  //   const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\n  return __jsx(\"div\", {\n    className: 'UP.UP-container'\n  }, __jsx(\"h1\", {\n    className: UP.test\n  }, \"UserPage.js\"));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n//     currentUser: state.currentUser        \n// \t}\n// }\n// export default connect(\n//   mapStateToProps,\n//   {setAlert, resetAlert}\n// )(UserPage)\n\n\nUserPage.getInitialProps = async context => {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {\n      username: 'SebastianSosa'\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  return {\n    user: userQuery.data.findUser\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    alertNotif: state.alertNotif\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css","map":null,"metadata":{},"sourceType":"module"}