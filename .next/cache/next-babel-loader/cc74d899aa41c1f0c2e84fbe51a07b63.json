{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { MAKE_NOTIFICATION, ASK_QUESTION, SAVE_POST } from '../../src/schemas/mutations';\nimport { GET_POST_TITLES, FIND_POST, Q_AND_A_NOTIFS } from '../../src/schemas/queries';\nimport Link from 'next/link';\nimport Loading from '../../components/Loading';\nimport ppStyle from '../../styles/pages/newPostPage.module.css';\nimport PostImages from '../../components/postPage/PostImages';\nimport PostLinks from '../../components/postPage/PostLinks';\nimport PostQandA from '../../components/postPage/PostQandA';\nimport InputHeader from '../../components/text-field/InputHeader';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport { setCurrentUserSP } from '../../redux/reducers/currentUser';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport { useField, triggerAlert, palletteGenerator } from '../../src/functions/functions';\nimport { bindActionCreators } from 'redux';\nimport { setToken } from '../../redux/reducers/token';\nimport apollo, { apolloClient } from '../../lib/apollo';\nimport { withRouter } from 'next/router';\nimport Layout from '../../components/Layout';\nimport Head from 'next/head';\nconst PostPage = withRouter(props => {\n  const {\n    0: currentPost,\n    1: setCurrentPost\n  } = useState(props.post);\n  const {\n    0: skillExpanded,\n    1: setSkillExpanded\n  } = useState(null);\n  const question = useField('text');\n  const message = useField('text');\n\n  const onJoinError = e => {\n    if (e.message.includes('is longer than the maximum allowed length')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const onQuestionError = e => {\n    if (e.message.includes('is longer than the maximum allowed length')) {\n      triggerAlert('warning', `question$: question of ${question.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const onFollowError = e => {\n    console.log(e);\n  };\n\n  const [followMutation] = useMutation(SAVE_POST, {\n    onError: onFollowError\n  });\n  const [makeNotification] = useMutation(MAKE_NOTIFICATION, {\n    onError: onJoinError\n  });\n  const [askQuestion] = useMutation(ASK_QUESTION, {\n    onError: onQuestionError\n  });\n\n  const handleFollow = async () => {\n    if (!props.token) {\n      triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n    }\n\n    const result = await followMutation({\n      variables: {\n        user: props.currentUser._id,\n        postId: currentPost._id\n      }\n    });\n\n    if (result) {\n      props.setCurrentUserSP(props.currentUser.savedPosts.concat(currentPost));\n      triggerAlert('success', 'followed$: you are now following this post', props.setAlert, props.resetAlert);\n    }\n  };\n\n  const qandaQuery = useQuery(Q_AND_A_NOTIFS, {\n    variables: {\n      title: decodeURIComponent(props.postTitle)\n    }\n  }); // const postQuery = useQuery(FIND_POST, {\n  //     variables: {title: decodeURIComponent(props.postTitle)}\n  // })\n\n  const qandaChangeConditions = () => {\n    const query = qandaQuery.data;\n    const reducer = currentPost;\n    if (!query) return null;\n    if (!query.searchAnsweredQToPost) return null;\n    if (!reducer) return null;\n    if (reducer.qanda) return null;\n    return query.searchAnsweredQToPost;\n  }; // const postChangeConditions = () => {\n  //     const query = postQuery.data\n  //     const reducer = currentPost\n  //     if (!query) return null\n  //     if (!query.findPost) return null\n  //     if (reducer) {\n  //         if (reducer.title === query.findPost.title) return null\n  //     }\n  //     return query.findPost\n  // }\n\n\n  const qanda = qandaChangeConditions(); // const post = postChangeConditions()\n\n  useEffect(() => {\n    if (qanda) {\n      setCurrentPost(_objectSpread(_objectSpread({}, currentPost), {}, {\n        qanda\n      }));\n    } // if (post) {\n    //     setCurrentPost(post)\n    // }\n\n  }, [qanda, setCurrentPost, currentPost]);\n\n  if (!currentPost) {\n    return __jsx(Loading, null);\n  }\n\n  let cleanedTime = new Date(Number(currentPost.time));\n  cleanedTime = cleanedTime.toString().split(' '); // cleanedTime = cleanedTime.slice(1,4).join(' ') + ' ' + cleanedTime[4].split(':').slice(0,2).join(':')\n\n  cleanedTime = cleanedTime.slice(1, 3).join(' ') + ', ' + cleanedTime[3];\n  let qandaList = currentPost.qanda ? currentPost.qanda.map(i => __jsx(PostQandA, {\n    qanda: i,\n    key: `QandA${i.question}`\n  })) : __jsx(Loading, null);\n  qandaList = qandaList.length ? qandaList : __jsx(\"div\", {\n    className: ppStyle.qandaText\n  }, \"no question and answer pairs yet\");\n  const skillsHTML = [];\n  const questionStyle = skillExpanded ? {\n    display: 'none'\n  } : {\n    display: 'block'\n  };\n\n  const handleNotification = async proposedContribution => {\n    if (!props.currentUser) {\n      triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await makeNotification({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentPost.user._id,\n        message: message.fields.value,\n        postId: currentPost._id,\n        proposedContribution\n      }\n    });\n\n    if (result) {\n      setSkillExpanded(null);\n      message.reset();\n      triggerAlert('success', `sent$: (check your answered notifications for the response) request has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  for (const ins in currentPost.skillNames) {\n    const skillName = currentPost.skillNames[ins];\n    const skillFill = currentPost.skillFills[ins];\n    const skillCap = currentPost.skillCapacities[ins];\n    const messageStyle = skillExpanded === skillName ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    };\n    const buttonToShown = skillExpanded === skillName ? __jsx(\"h4\", {\n      onClick: () => setSkillExpanded(null),\n      className: ppStyle.PPSButtonExit\n    }, \"X\") : skillFill < skillCap ? __jsx(\"h4\", {\n      onClick: () => setSkillExpanded(skillName),\n      className: ppStyle.PPSButton\n    }, \"join\") : __jsx(\"h4\", {\n      className: ppStyle.PPSButtonDisabled\n    }, \"join\");\n    const skillProposition = Array(currentPost.skillNames.length).fill(0);\n    skillProposition[ins] = 1;\n    skillsHTML.push(__jsx(\"div\", {\n      className: ppStyle.PPSSkill,\n      key: `PPSS${skillName}`\n    }, __jsx(\"div\", {\n      className: ppStyle.PPSDivision\n    }), __jsx(\"p\", {\n      className: ppStyle.PPSSkillName\n    }, skillName), __jsx(\"div\", {\n      className: ppStyle.PPSSkillSecondary\n    }, __jsx(\"p\", {\n      className: ppStyle.PPSSkillInfo\n    }, skillFill, \"/\", skillCap), buttonToShown), __jsx(\"div\", {\n      className: ppStyle.PPSSkillForm,\n      style: messageStyle\n    }, __jsx(\"div\", {\n      className: ppStyle.PPSTitle\n    }, __jsx(InputHeader, {\n      inputFor: \"PPS-message\",\n      info: false,\n      title: \"message\",\n      color: \"white\"\n    })), __jsx(\"div\", {\n      className: ppStyle.PPSInputContainer\n    }, __jsx(\"textarea\", _extends({\n      className: ppStyle.PPSInput,\n      id: \"PPS-message\"\n    }, message.fields))), __jsx(\"div\", {\n      className: ppStyle.PPCSubmitContainer\n    }, __jsx(\"h4\", {\n      onClick: () => handleNotification(skillProposition),\n      className: ppStyle.PPSBButton,\n      style: {\n        borderColor: currentPost.color\n      }\n    }, \"join\")))));\n  }\n\n  const handleQuestion = async () => {\n    if (!props.currentUser) {\n      triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!question.fields.value.length) {\n      triggerAlert('warning', `question$: question field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await askQuestion({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentPost.user._id,\n        postId: currentPost._id,\n        question: question.fields.value\n      }\n    });\n\n    if (result) {\n      question.reset();\n      triggerAlert('success', `sent$: (check your answered notifications for the response) question has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const pallette = palletteGenerator(currentPost.color).colorPallette;\n  const teamHTML = currentPost.team ? currentPost.team.map(un => __jsx(Link, {\n    href: \"/user/username\",\n    as: `/user/${un}`,\n    className: `${ppStyle.PPCUserContainer} neutralize-link`,\n    key: `PT${un}`\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    className: ppStyle.PPCUserIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\"\n  }), __jsx(\"p\", {\n    className: \"NM\"\n  }, un)))) : null;\n\n  const HomeContent = () => {\n    if (props.home) {\n      return __jsx(\"div\", {\n        className: ppStyle.homeOptions\n      }, __jsx(Link, {\n        href: \"/results/\",\n        className: `${ppStyle.homeOption} neutralize-link`,\n        style: {\n          backgroundColor: '#282828'\n        }\n      }, __jsx(\"a\", null, __jsx(\"img\", {\n        src: \"/svg/searchWW.svg\",\n        className: ppStyle.homeOptionIcon,\n        alt: \"search\"\n      }), __jsx(\"h3\", {\n        className: ppStyle.homeOptionText\n      }, \"browse all\"))), __jsx(Link, {\n        href: \"/postformpage/\",\n        className: `${ppStyle.homeOption} neutralize-link`,\n        style: {\n          backgroundColor: 'rgb(52,166,95)'\n        }\n      }, __jsx(\"img\", {\n        src: \"/svg/plusW.svg\",\n        className: ppStyle.homeOptionIcon,\n        alt: \"add\"\n      }), __jsx(\"h3\", {\n        className: ppStyle.homeOptionText\n      }, \"add project\")), __jsx(\"a\", {\n        href: \"https://discord.gg/v7vFc9U\",\n        className: `${ppStyle.homeOption} ${ppStyle.homeOptionHighlight} neutralize-link`,\n        style: {\n          backgroundColor: '#7289DA'\n        }\n      }, __jsx(\"img\", {\n        src: \"/svg/websites/discord.svg\",\n        className: ppStyle.homeOptionIcon,\n        alt: \"Discord\"\n      }), __jsx(\"h3\", {\n        className: ppStyle.homeOptionText\n      }, \"community discord\")));\n    } else {\n      return null;\n    }\n  };\n\n  const ModifiedDescription = () => {\n    const spacedDis = currentPost.description.split(' ');\n\n    for (const i in spacedDis) {\n      if (spacedDis[i].includes('https://')) {\n        spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\" rel=\"nofollow\">${spacedDis[i]}</a>`;\n      }\n\n      if (spacedDis[i].includes('http://')) {\n        spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\" rel=\"nofollow\">${spacedDis[i]}</a>`;\n      }\n    }\n\n    const finalDis = spacedDis.join(' ');\n    return __jsx(\"p\", {\n      className: ppStyle.PPCDescription,\n      dangerouslySetInnerHTML: {\n        __html: finalDis\n      }\n    });\n  };\n\n  const headImage = currentPost.imageLinks.length ? currentPost.imageLinks[0] : 'https://i.imgur.com/6z9eNzV.png';\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, currentPost.title, \" | Unilous\"), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: headImage,\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${currentPost.title} | Unilous`,\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${currentPost.description}`,\n    key: \"description\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: `${currentPost.title} | Unilous`,\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${currentPost.description}`,\n    key: \"description\"\n  })), __jsx(\"div\", {\n    className: \"navbar-height\"\n  }), __jsx(\"div\", {\n    className: ppStyle.postPageContainer\n  }, __jsx(\"div\", {\n    className: ppStyle.PPContent\n  }, __jsx(HomeContent, null), __jsx(\"h2\", {\n    className: ppStyle.PPCTitle\n  }, currentPost.title), __jsx(\"div\", {\n    className: ppStyle.PPCSubHeader\n  }, __jsx(Link, {\n    href: \"/user/[username]\",\n    as: `/user/${encodeURIComponent(currentPost.user.username)}`\n  }, __jsx(\"a\", {\n    className: `${ppStyle.PPCUserContainer} neutralize-link`\n  }, __jsx(\"img\", {\n    className: ppStyle.PPCUserIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\"\n  }), __jsx(\"p\", {\n    className: \"NM\"\n  }, currentPost.user.username))), __jsx(\"p\", {\n    className: ppStyle.PPCTime\n  }, cleanedTime)), __jsx(ModifiedDescription, null), __jsx(PostImages, {\n    imageLinks: currentPost.imageLinks,\n    color: currentPost.color\n  }), __jsx(PostLinks, {\n    referenceLinks: currentPost.referenceLinks\n  }), __jsx(\"h3\", {\n    className: ppStyle.PPCTitle\n  }, \"Q and A\"), __jsx(\"div\", {\n    className: ppStyle.PPCAllQandaContainer\n  }, qandaList), __jsx(\"h3\", {\n    className: ppStyle.PPCTitle\n  }, \"team\"), __jsx(\"div\", {\n    className: ppStyle.teamInfo\n  }, teamHTML.length, \" team members\"), __jsx(\"div\", {\n    className: ppStyle.PPCTeamContainer\n  }, teamHTML)), __jsx(FormContainer, {\n    pallette: pallette\n  }, __jsx(\"div\", {\n    className: ppStyle.PPSFollowHeader\n  }, __jsx(\"div\", {\n    onClick: () => handleFollow(),\n    className: ppStyle.PPSFollowHeader,\n    style: {\n      borderTop: '2px solid currentPost.color'\n    }\n  }, __jsx(\"svg\", {\n    className: ppStyle.PPCUserIcon,\n    fill: currentPost.color,\n    viewBox: \"0 -28 512.00002 512\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n  }, __jsx(\"path\", {\n    d: \"m471.382812 44.578125c-26.503906-28.746094-62.871093-44.578125-102.410156-44.578125-29.554687 0-56.621094 9.34375-80.449218 27.769531-12.023438 9.300781-22.917969 20.679688-32.523438 33.960938-9.601562-13.277344-20.5-24.660157-32.527344-33.960938-23.824218-18.425781-50.890625-27.769531-80.445312-27.769531-39.539063 0-75.910156 15.832031-102.414063 44.578125-26.1875 28.410156-40.613281 67.222656-40.613281 109.292969 0 43.300781 16.136719 82.9375 50.78125 124.742187 30.992188 37.394531 75.535156 75.355469 127.117188 119.3125 17.613281 15.011719 37.578124 32.027344 58.308593 50.152344 5.476563 4.796875 12.503907 7.4375 19.792969 7.4375 7.285156 0 14.316406-2.640625 19.785156-7.429687 20.730469-18.128907 40.707032-35.152344 58.328125-50.171876 51.574219-43.949218 96.117188-81.90625 127.109375-119.304687 34.644532-41.800781 50.777344-81.4375 50.777344-124.742187 0-42.066407-14.425781-80.878907-40.617188-109.289063zm0 0\"\n  })), __jsx(\"p\", {\n    className: \"NM\"\n  }, \"follow\"))), skillsHTML, __jsx(\"div\", {\n    style: questionStyle\n  }, __jsx(\"div\", {\n    className: ppStyle.PPSDivision\n  }), __jsx(\"div\", {\n    className: ppStyle.PPSTitle\n  }, __jsx(InputHeader, {\n    inputFor: \"PPS-question\",\n    info: true,\n    title: \"question\",\n    color: \"white\"\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"if answered it will be shown on post\")))), __jsx(\"div\", {\n    className: ppStyle.PPSInputContainer\n  }, __jsx(\"textarea\", _extends({\n    className: ppStyle.PPSInput,\n    id: \"PPS-question\"\n  }, question.fields))), __jsx(\"div\", {\n    className: ppStyle.PPCSubmitContainer\n  }, __jsx(\"h4\", {\n    onClick: () => handleQuestion(),\n    className: ppStyle.PPSButton,\n    style: {\n      borderColor: currentPost.color\n    }\n  }, \"ask\"))))));\n}); // const mapStateToProps = (state) => {\n// \treturn {\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps, \n//     { setAlert, resetAlert, setCurrentUserSP }\n// )(PostPage)\n\nexport async function getStaticPaths() {\n  const titlesQuery = await apolloClient.query({\n    query: GET_POST_TITLES\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const paths = titlesQuery.data.allPosts.map(p => `/post/${encodeURIComponent(p.title)}`);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const postQuery = await apolloClient.query({\n    query: FIND_POST,\n    variables: {\n      title: context.params.title\n    }\n  }).catch(err => console.log(err));\n  return {\n    props: {\n      post: postQuery.data.findPost\n    }\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    token: state.token,\n    alertNotif: state.alertNotif\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch),\n    setToken: bindActionCreators(setToken, dispatch),\n    setCurrentUserSP: bindActionCreators(setCurrentUserSP, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);","map":null,"metadata":{},"sourceType":"module"}