{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { LIST_OF_NOTIFICATIONS } from '../../../src/schemas/queries';\nimport { setCurrentUserNotifications } from '../../../redux/reducers/currentUser';\nimport Notif from './Notif';\nimport Loading from '../../Loading';\nimport apollo, { apolloClient } from '../../../lib/apollo';\nimport { bindActionCreators } from 'redux';\nimport UR from '../../../styles/user/user.module.css';\nimport UU from '../../../styles/user/userUtilities.module.css';\n\nvar UserNotifList = function UserNotifList(props) {\n  // const notifsListQuery = useQuery(LIST_OF_NOTIFICATIONS, {\n  //     variables: {notifications: props.currentUser.notifications.map(n => n._id)}\n  // })\n  // console.log(notifsListQuery)\n  // const notifsListQuery = apolloClient.query({\n  //     query: LIST_OF_NOTIFICATIONS,\n  //     variables: {notifications: props.currentUser.notifications.map(n => n._id)}\n  // }).catch(err => console.log(err))\n  var _useState = useState('to you'),\n      sentFilter = _useState[0],\n      setSentFilter = _useState[1];\n\n  var _useState2 = useState(false),\n      showSFDD = _useState2[0],\n      setShowSFDD = _useState2[1];\n\n  var _useState3 = useState('pending'),\n      statusFilter = _useState3[0],\n      setStatusFilter = _useState3[1];\n\n  var _useState4 = useState(false),\n      showStatusDD = _useState4[0],\n      setShowStatusDD = _useState4[1]; // const notifsListConditions = (query, reducer) => {\n  //     if (!query) { return null }\n  //     if (reducer.length === 0) { return null }\n  //     if (reducer[0].userTo) {\n  //         if (query._id === reducer[0]._id ) { return null }\n  //     }\n  //     return query\n  // }\n  // const notifsList = notifsListConditions(notifsListQuery.data.listOfNotifications, props.currentUser.notifications)\n  // useEffect(() => {\n  //     if (notifsList) {\n  //         props.setCurrentUserNotifications(notifsList)\n  //     }\n  // }, [notifsList, props, props.setCurrentUserNotifications])\n\n\n  if (props.currentUser.notifications.length > 0) {\n    if (!props.currentUser.notifications[0].userTo) {\n      return __jsx(\"div\", {\n        style: {\n          gridColumn: '1/3'\n        }\n      }, __jsx(\"div\", {\n        style: {\n          height: '5vh'\n        }\n      }), __jsx(Loading, {\n        color: \"white\"\n      }));\n    }\n  }\n\n  var Filter = function Filter() {\n    var sentOptions = function sentOptions() {\n      var allOptions = ['from you', 'to you'];\n\n      var onOptionClick = function onOptionClick(option) {\n        setSentFilter(option);\n        setShowSFDD(!showSFDD);\n      };\n\n      return allOptions.map(function (o) {\n        return o !== sentFilter ? __jsx(\"div\", {\n          onClick: function onClick() {\n            return onOptionClick(o);\n          },\n          className: UU.NFDDOption,\n          key: \"SFDD\".concat(o)\n        }, o) : null;\n      });\n    };\n\n    var sentDD = showSFDD ? __jsx(\"div\", {\n      className: UU.NFropdown\n    }, __jsx(\"div\", {\n      className: UU.NFSplitter\n    }), sentOptions()) : null;\n\n    var statusOptions = function statusOptions() {\n      var allOptions = ['all', 'accepted', 'declined', 'pending', 'messages'];\n\n      var onOptionClick = function onOptionClick(option) {\n        setStatusFilter(option);\n        setShowStatusDD(!showStatusDD);\n      };\n\n      return allOptions.map(function (o) {\n        return o !== statusFilter ? __jsx(\"div\", {\n          onClick: function onClick() {\n            return onOptionClick(o);\n          },\n          className: \"\".concat(o, \"-option \").concat(UU.NFDDOption),\n          key: \"StatusDD\".concat(o)\n        }, o) : null;\n      });\n    };\n\n    var statusDD = showStatusDD ? __jsx(\"div\", {\n      className: UU.NFDropdown\n    }, __jsx(\"div\", {\n      className: UU.NFSplitter\n    }), statusOptions()) : null;\n    return __jsx(\"div\", {\n      className: UU.notifFilterContainer\n    }, __jsx(\"div\", {\n      className: UU.NFCreatorContainer\n    }, __jsx(\"h4\", {\n      className: UU.NFLabel\n    }, \"status\"), __jsx(\"div\", {\n      className: UU.NFOptionContainer\n    }, __jsx(\"div\", {\n      onClick: function onClick() {\n        return setShowStatusDD(!showStatusDD);\n      },\n      className: \"\".concat(statusFilter, \"-option \").concat(UU.NFOption)\n    }, statusFilter), statusDD)), __jsx(\"div\", {\n      className: UU.NFCreatorContainer,\n      style: {\n        marginLeft: '15px'\n      }\n    }, __jsx(\"h4\", {\n      className: UU.NFLabel\n    }, \"sent\"), __jsx(\"div\", {\n      className: UU.NFOptionContainer\n    }, __jsx(\"div\", {\n      onClick: function onClick() {\n        return setShowSFDD(!showSFDD);\n      },\n      className: UU.NFOption\n    }, sentFilter), sentDD)));\n  };\n\n  var statusConditions = function statusConditions(notif) {\n    if (statusFilter === 'all') return true;\n    var notifStatus = notif.accepted === null ? 'pending' : notif.accepted ? notif.post ? 'accepted' : 'messages' : 'declined';\n    if (statusFilter === notifStatus) return true;\n    return false;\n  };\n\n  var sentConditions = function sentConditions(notif) {\n    if (sentFilter === 'all') return true;\n    var sentStatus = notif.userFrom.username === props.currentUser.username ? 'from you' : 'to you';\n    if (sentFilter === sentStatus) return true;\n    return false;\n  };\n\n  var showNotifications = props.currentUser.notifications.map(function (n) {\n    if (statusConditions(n) && sentConditions(n)) {\n      return __jsx(Notif, {\n        notif: n,\n        key: \"UN\".concat(n._id)\n      });\n    }\n\n    return null;\n  }).reverse();\n  return __jsx(\"div\", {\n    className: \"userUtil-notif\"\n  }, __jsx(Filter, null), __jsx(\"div\", {\n    style: {\n      height: '10px'\n    }\n  }), showNotifications, __jsx(\"div\", {\n    style: {\n      height: '10px'\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setCurrentUserNotifications: bindActionCreators(setCurrentUserNotifications, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserNotifList);","map":null,"metadata":{},"sourceType":"module"}