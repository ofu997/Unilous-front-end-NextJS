{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { useMutation } from '@apollo/react-hooks';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { resetAlert, setAlert } from '../../../redux/reducers/alertNotif';\nimport { triggerAlert, useField } from '../../../src/functions/functions';\nimport { CREATE_USER } from '../../../src/schemas/mutations';\nimport UR from '../../../styles/user/user.module.css';\nimport InputHeader from '../../text-field/InputHeader';\n\nvar Register = function Register(props) {\n  var username = useField('text');\n  var password = useField('password');\n  var rePassword = useField('password');\n  var email = useField('email');\n  var referenceLink = useField('url');\n\n  var onError = function onError(e) {\n    var cleanedMessage = e.message;\n    console.log(referenceLink.fields.value);\n    console.log(e.message);\n    if (cleanedMessage.includes('username')) cleanedMessage = \"username$: \".concat(username.fields.value, \" is already being used\");\n    if (cleanedMessage.includes('referenceLink')) cleanedMessage = \"reference link$: \".concat(referenceLink.fields.value, \" is already being used\");\n    if (cleanedMessage.includes('email')) cleanedMessage = \"email$: \".concat(email.fields.value, \" is already being used\");\n    triggerAlert('warning', cleanedMessage, props.setAlert, props.resetAlert);\n  };\n\n  var _useMutation = useMutation(CREATE_USER, {\n    onError: onError\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      registerMutation = _useMutation2[0];\n\n  var handleSumbit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!(password.fields.value !== rePassword.fields.value)) {\n                _context.next = 4;\n                break;\n              }\n\n              triggerAlert('warning', 'password$: password and re-password did not match', props.setAlert, props.resetAlert);\n              return _context.abrupt(\"return\", null);\n\n            case 4:\n              if (!(!username.fields.value.length || !password.fields.value.length || !rePassword.fields.value.length || !referenceLink.fields.value.length)) {\n                _context.next = 7;\n                break;\n              }\n\n              triggerAlert('warning', 'all$: all fields must be filled', props.setAlert, props.resetAlert);\n              return _context.abrupt(\"return\", null);\n\n            case 7:\n              _context.next = 9;\n              return registerMutation({\n                variables: {\n                  username: username.fields.value,\n                  password: password.fields.value,\n                  referenceLink: referenceLink.fields.value\n                }\n              });\n\n            case 9:\n              result = _context.sent;\n\n              if (result) {\n                if (props.changeMenuItem) {\n                  props.changeMenuItem(null);\n                }\n\n                username.reset();\n                password.reset();\n                rePassword.reset();\n                email.reset();\n                referenceLink.reset();\n                triggerAlert('success', 'registered$: account successfully created', props.setAlert, props.resetAlert);\n                console.log('registered');\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSumbit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var bgStyle = props.noBG ? {\n    backgroundColor: '#282828'\n  } : null;\n  return __jsx(\"div\", {\n    className: UR.userFormContainer,\n    style: bgStyle\n  }, __jsx(\"form\", {\n    className: UR.userForm,\n    onSubmit: function onSubmit(e) {\n      return handleSumbit(e);\n    }\n  }, __jsx(InputHeader, {\n    inputFor: \"SI-username\",\n    info: false,\n    title: \"username\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, username.fields, {\n    id: \"SI-username\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-password\",\n    info: false,\n    title: \"password\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, password.fields, {\n    id: \"SI-password\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-rePassword\",\n    info: false,\n    title: \"re-type password\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, rePassword.fields, {\n    id: \"SI-rePassword\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-referenceLink\",\n    info: true,\n    title: \"portfolio link\",\n    color: \"dark\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"link on your user page used as a resume to demonstrate your ability\"), __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, __jsx(\"strong\", null, \"always view another user's portfolio link before working with them\")), __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"sites recommended: \", __jsx(\"strong\", null, \"LinkedIn\"), \", \", __jsx(\"strong\", null, \"Indeed\"), \", \", __jsx(\"strong\", null, \"GitHub\"), \", or \", __jsx(\"strong\", null, \"Facebook\")), __jsx(\"li\", null, \"to further ensure your portfolio link is trustworthy, link your Unilous account from your portfolio link\"))), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, referenceLink.fields, {\n    id: \"SI-referenceLink\"\n  })), __jsx(\"button\", {\n    className: UR.UFSubmit,\n    type: \"submit\"\n  }, __jsx(\"h3\", null, \"register\"))));\n}; //const mapStateToProps = (state) => {\n//\treturn {\n//\t}\n//}\n\n\nexport default connect(null, {\n  setAlert: setAlert,\n  resetAlert: resetAlert\n})(Register);","map":null,"metadata":{},"sourceType":"module"}