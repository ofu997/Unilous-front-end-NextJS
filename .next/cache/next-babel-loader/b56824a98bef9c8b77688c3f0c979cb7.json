{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { LOGIN } from '../../../src/schemas/mutations';\nimport { useField, triggerAlert } from '../../../src/functions/functions';\nimport { setToken } from '../../../redux/reducers/token';\nimport InputHeader from '../../text-field/InputHeader';\nimport { setAlert, resetAlert } from '../../../redux/reducers/alertNotif';\nimport UR from '../../../styles/user/user.module.css';\n\nvar SignIn = function SignIn(props) {\n  var username = useField('text');\n  var password = useField('password');\n\n  var onError = function onError(e) {\n    var cleanedMessage = e.message;\n    console.log(cleanedMessage);\n    cleanedMessage = cleanedMessage.split(':');\n    cleanedMessage = cleanedMessage.slice(1, cleanedMessage.length).join('$:');\n    triggerAlert('warning', cleanedMessage, props.setAlert, props.resetAlert);\n  };\n\n  var _useMutation = useMutation(LOGIN, {\n    onError: onError\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      signInMutation = _useMutation2[0];\n\n  var handleSumbit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var result, token;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return signInMutation({\n                variables: {\n                  username: username.fields.value,\n                  password: password.fields.value\n                }\n              });\n\n            case 3:\n              result = _context.sent;\n\n              if (result) {\n                if (props.changeMenuItem) {\n                  props.changeMenuItem(null);\n                }\n\n                token = result.data.login.value;\n                username.reset();\n                password.reset();\n                localStorage.setItem('token', token);\n                localStorage.setItem('username', username.fields.value);\n                props.setToken(token);\n                window.location.reload();\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSumbit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var bgStyle = props.noBG ? {\n    backgroundColor: '#282828'\n  } : null;\n  return __jsx(\"div\", {\n    className: UR.userFormContainer,\n    style: bgStyle\n  }, __jsx(\"form\", {\n    className: UR.userForm,\n    onSubmit: function onSubmit(e) {\n      return handleSumbit(e);\n    }\n  }, __jsx(InputHeader, {\n    inputFor: \"SI-username\",\n    info: false,\n    title: \"username\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, username.fields, {\n    id: \"SI-username\"\n  })), __jsx(InputHeader, {\n    inputFor: \"SI-password\",\n    info: false,\n    title: \"password\",\n    color: \"dark\"\n  }), __jsx(\"input\", _extends({\n    className: UR.UFInput\n  }, password.fields, {\n    id: \"SI-password\"\n  })), __jsx(\"button\", {\n    className: UR.UFSubmit,\n    type: \"submit\"\n  }, __jsx(\"h3\", null, \"sign in\"))));\n}; // const mapStateToProps = (state) => {\n// \treturn {\n// \t}\n// }\n\n\nexport default connect(null, {\n  setToken: setToken,\n  setAlert: setAlert,\n  resetAlert: resetAlert\n})(SignIn);","map":null,"metadata":{},"sourceType":"module"}