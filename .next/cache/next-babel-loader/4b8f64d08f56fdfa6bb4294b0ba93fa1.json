{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Link from 'next/link';\nimport { useMutation } from '@apollo/react-hooks';\nimport { REMOVE_SAVED_POST } from '../../src/schemas/mutations';\nimport { setCurrentUserPosts, setCurrentUserSP } from '../../redux/reducers/currentUser';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport { triggerAlert, palletteGenerator } from '../../src/functions/functions';\nimport PT from '../../styles/post.module.css';\n\nvar PostSmall = function PostSmall(props) {\n  var handleError = function handleError(e) {\n    console.log(e);\n  }; // const [ deletePostMutation ] = useMutation(DELETE_POST, {\n  //     onError: handleError\n  // })\n\n\n  var _useMutation = useMutation(REMOVE_SAVED_POST, {\n    onError: handleError\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      removeSPMutation = _useMutation2[0];\n\n  var p = props.post;\n  var user = props.post.user ? props.post.user.username : props.user;\n  var pallette = palletteGenerator(p.color).colorPallette; // const handleRemove = async () => {\n  //     const result = await deletePostMutation({\n  //         variables: {postId: props.post._id}\n  //     })\n  //     if (result) {\n  //         props.setCurrentUserPosts(props.currentUser.posts.filter(p => p._id !== props.post._id))\n  //         triggerAlert('danger', `deleted $: deleted post '${p.title}'`, props.setAlert, props.resetAlert)\n  //     }\n  // }\n\n  var handleSaveRemove = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result, newSavedPosts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return removeSPMutation({\n                variables: {\n                  user: props.currentUser._id,\n                  postId: p._id\n                }\n              });\n\n            case 2:\n              result = _context.sent;\n\n              if (result) {\n                newSavedPosts = props.currentUser.savedPosts.filter(function (post) {\n                  return post._id !== p._id;\n                });\n                props.setCurrentUserSP(newSavedPosts);\n                triggerAlert('danger', \"unfollowed$: unfollowed post '\".concat(p.title, \"'\"), props.setAlert, props.resetAlert);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSaveRemove() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (props.type === 'saved') {\n    return __jsx(\"div\", {\n      className: PT.postWrapperSm\n    }, __jsx(\"div\", {\n      className: PT.postColorIndicator,\n      style: {\n        backgroundColor: pallette.color\n      }\n    }), __jsx(\"div\", {\n      className: PT.postContainer\n    }, __jsx(\"div\", {\n      className: PT.postHeader\n    }, __jsx(Link, {\n      href: \"/user/[username]\",\n      as: \"/user/\".concat(encodeURIComponent(user))\n    }, __jsx(\"a\", {\n      className: \"\".concat(PT.PHUser, \" neutralize-link\")\n    }, __jsx(\"img\", {\n      className: PT.PHUIcon,\n      src: \"/svg/userB.svg\",\n      alt: \"user\"\n    }), __jsx(\"div\", null, user)))), __jsx(Link, {\n      href: \"/post/[title]\",\n      as: \"/post/\".concat(encodeURIComponent(p.title))\n    }, __jsx(\"a\", {\n      className: \"neutralize-link\"\n    }, __jsx(\"h3\", {\n      className: PT.postTitle,\n      style: {\n        marginBottom: '7px'\n      }\n    }, p.title)))), __jsx(\"div\", {\n      onClick: function onClick() {\n        return handleSaveRemove();\n      },\n      className: PT.postSmRemove\n    }, \"x\"));\n  }\n\n  if (props.currentUser) {\n    if (user === props.currentUser.username) {\n      return __jsx(\"div\", {\n        className: PT.postWrapperSm\n      }, __jsx(\"div\", {\n        className: PT.postColorIndicator,\n        style: {\n          backgroundColor: pallette.color\n        }\n      }), __jsx(\"div\", {\n        className: PT.postContainer\n      }, __jsx(\"div\", {\n        className: PT.postHeader\n      }, __jsx(Link, {\n        href: \"/user/[username]\",\n        as: \"/user/\".concat(encodeURIComponent(user))\n      }, __jsx(\"a\", {\n        className: \"\".concat(PT.PHUser, \" neutralize-link\")\n      }, __jsx(\"img\", {\n        className: PT.PHUIcon,\n        src: \"/svg/userB.svg\",\n        alt: \"user\"\n      }), __jsx(\"div\", null, user)))), __jsx(Link, {\n        href: \"/post/[title]\",\n        as: \"/post/\".concat(encodeURIComponent(p.title))\n      }, __jsx(\"a\", {\n        className: \"neutralize-link\"\n      }, __jsx(\"h3\", {\n        className: PT.postTitle,\n        style: {\n          marginBottom: '7px'\n        }\n      }, p.title)))));\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: PT.postWrapperSm,\n    style: {\n      gridTemplateColumns: '8px auto'\n    }\n  }, __jsx(\"div\", {\n    className: PT.postColorIndicator,\n    style: {\n      backgroundColor: pallette.color\n    }\n  }), __jsx(\"div\", {\n    className: PT.postContainer\n  }, __jsx(\"div\", {\n    className: PT.postHeader\n  }, __jsx(Link, {\n    href: \"/user/[username]\",\n    as: \"/user/\".concat(encodeURIComponent(user))\n  }, __jsx(\"a\", {\n    className: \"\".concat(PT.PHUser, \" neutralize-link\")\n  }, __jsx(\"img\", {\n    className: PT.PHUIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\"\n  }), __jsx(\"div\", null, user)))), __jsx(Link, {\n    href: \"/post/[title]\",\n    as: \"/post/\".concat(encodeURIComponent(p.title))\n  }, __jsx(\"a\", {\n    className: \"neutralize-link\"\n  }, __jsx(\"h3\", {\n    className: PT.postTitle,\n    style: {\n      marginBottom: '7px'\n    }\n  }, p.title)))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCurrentUserPosts: setCurrentUserPosts,\n  setCurrentUserSP: setCurrentUserSP,\n  setAlert: setAlert,\n  resetAlert: resetAlert\n})(PostSmall);","map":null,"metadata":{},"sourceType":"module"}