{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_POST } from '../src/schemas/mutations';\nimport { useField, triggerAlert, palletteGenerator, websiteStats } from '../src/functions/functions';\nimport PFP from '../styles/pages/postForm.module.css';\nimport { withRouter } from 'react-router-dom';\nimport InputHeader from '../components/text-field/InputHeader';\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif';\nimport SkillSugg from '../components/text-field/SkillSugg';\nimport Router from 'next/router';\nimport { bindActionCreators } from 'redux';\nimport Layout from '../components/Layout';\nimport Head from 'next/head';\n\nlet PostFormPage = props => {\n  const title = useField('text');\n  const description = useField('text');\n  const {\n    0: color,\n    1: setColor\n  } = useState(null);\n  const groupContactLink = useField('url');\n  const {\n    0: skillName,\n    1: setSkillName\n  } = useState('');\n  const {\n    0: skillNameList,\n    1: setSkillNameList\n  } = useState([]);\n  const {\n    0: skillCapacity,\n    1: setSkillCapacity\n  } = useState('');\n  const {\n    0: skillCapList,\n    1: setSkillCapList\n  } = useState([]);\n  const {\n    0: imageLink,\n    1: setImageLink\n  } = useState('');\n  const {\n    0: imageLinkList,\n    1: setImageLinkList\n  } = useState([]);\n  const {\n    0: referenceLink,\n    1: setReferenceLink\n  } = useState('');\n  const {\n    0: referenceLinkList,\n    1: setReferenceLinkList\n  } = useState([]);\n  const {\n    0: skillProposition,\n    1: setSkillProposition\n  } = useState(null);\n  const {\n    0: skillSelected,\n    1: setSkillSelected\n  } = useState(null);\n\n  const handleError = e => {\n    const message = e.message;\n\n    if (message.includes('Response not successful')) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `title` (')) {\n      triggerAlert('warning', `title$: title of ${title.fields.value.length} characters must only have at most 100 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('dup key: { title')) {\n      triggerAlert('warning', `title$: ${title.fields.value} is not unique. Title must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate description')) {\n      triggerAlert('warning', `description$: description is not unique. Description must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('minimum allowed length')) {\n      triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must at least have 100 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `description` (')) {\n      triggerAlert('warning', `description$: description of ${description.fields.value.length} characters must only have at most 3000 characters`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate contactLink')) {\n      triggerAlert('warning', `group/contact link$: ${groupContactLink.fields.value} is not unique. Group/contact link must be unique`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    console.log(e);\n  };\n\n  const [createPost] = useMutation(CREATE_POST, {\n    onError: handleError\n  });\n  const pallette = color ? palletteGenerator(color).colorPallette : {\n    color: null,\n    heigherColor: null\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!props.token) {\n      triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!skillNameList.length || !groupContactLink.fields.value.length) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    let cleanedTitle = [];\n\n    for (const word of title.fields.value.split(' ')) {\n      if (word.length) cleanedTitle.push(word);\n    }\n\n    const postCreated = await createPost({\n      variables: {\n        title: cleanedTitle.join(' '),\n        user: props.currentUser._id,\n        skillNames: skillNameList,\n        skillCapacities: skillCapList,\n        skillFills: skillProposition,\n        description: description.fields.value,\n        contactLink: groupContactLink.fields.value,\n        color: color,\n        imageLinks: imageLinkList,\n        referenceLinks: referenceLinkList\n      }\n    });\n\n    if (postCreated) {\n      title.reset();\n      description.reset();\n      groupContactLink.reset();\n      setSkillName('');\n      setSkillNameList([]);\n      setSkillCapacity('');\n      setSkillCapList([]);\n      setImageLink('');\n      setImageLinkList([]);\n      setReferenceLink('');\n      setReferenceLinkList([]);\n      console.log('SUBMITTED');\n      Router.push(`/post/${encodeURIComponent(postCreated.data.addPost.title)}`);\n    }\n\n    console.log('FAILED', postCreated);\n  };\n\n  const colors = ['rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)', 'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', 'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)', 'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'];\n  const colorsHTML = colors.map(c => __jsx(\"div\", {\n    onClick: () => setColor(c),\n    className: PFP.colorIns,\n    style: {\n      backgroundColor: c\n    },\n    key: `PFC${c}`\n  }));\n\n  const addSkills = () => {\n    let cleanedSkill = [];\n\n    for (const word of skillName.split(' ')) {\n      if (word.length) cleanedSkill.push(word);\n    }\n\n    setSkillName(cleanedSkill.join(' '));\n\n    if (Number(skillCapacity)) {\n      setSkillNameList(skillNameList.concat(skillName.toLowerCase()));\n      setSkillName('');\n      setSkillCapList(skillCapList.concat(Number(skillCapacity)));\n      setSkillCapacity('');\n      setSkillProposition(null);\n      setSkillSelected(null);\n    }\n  };\n\n  const removeSkill = ind => {\n    const newSkillNameList = [];\n\n    for (const i in skillNameList) {\n      if (i !== ind) {\n        newSkillNameList.push(skillNameList[i]);\n      }\n    }\n\n    setSkillNameList(newSkillNameList);\n    const newSkillCapList = [];\n\n    for (const i in skillCapList) {\n      if (i !== ind) {\n        newSkillCapList.push(skillCapList[i]);\n      }\n    }\n\n    setSkillCapList(newSkillCapList);\n    const newSkillProposition = [];\n\n    for (const i in props.skillProposition) {\n      if (i !== ind) {\n        newSkillProposition.push(props.skillProposition[i]);\n      }\n    }\n  };\n\n  const removeImage = ind => {\n    const newImageLinkList = [];\n\n    for (const i in imageLinkList) {\n      if (i !== ind) {\n        newImageLinkList.push(imageLinkList[i]);\n      }\n    }\n\n    setImageLinkList(newImageLinkList);\n  };\n\n  const addImage = () => {\n    if (imageLink.includes('https://') || imageLink.includes('http://')) {\n      setImageLinkList(imageLinkList.concat(imageLink));\n      setImageLink('');\n    }\n  };\n\n  const removeRL = ind => {\n    const newReferenceLinkList = [];\n\n    for (const i in referenceLinkList) {\n      if (i !== ind) {\n        newReferenceLinkList.push(referenceLinkList[i]);\n      }\n    }\n\n    setReferenceLinkList(newReferenceLinkList);\n  };\n\n  const addRL = () => {\n    if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n      setReferenceLinkList(referenceLinkList.concat(referenceLink));\n      setReferenceLink('');\n    }\n  };\n\n  const skillsHTML = () => {\n    let skillsHTML = [];\n\n    for (const ind in skillNameList) {\n      skillsHTML.push(__jsx(\"div\", {\n        className: PFP.PFSkillWrapper,\n        key: `PFS${skillNameList[ind]}`\n      }, __jsx(\"div\", {\n        className: PFP.PFSkillContainer\n      }, __jsx(\"div\", {\n        className: PFP.PFSkillName\n      }, skillNameList[ind]), __jsx(\"div\", {\n        className: PFP.PFSkillCap\n      }, skillCapList[ind])), __jsx(\"div\", {\n        className: PFP.PFSkillRemove,\n        onClick: () => removeSkill(ind)\n      }, \"x\")));\n    }\n\n    return skillsHTML;\n  };\n\n  const skillContribution = () => {\n    if (!skillNameList.length) {\n      return __jsx(\"h4\", {\n        className: PFP.PFInputTitle,\n        style: {\n          opacity: 0.7\n        }\n      }, \"must add skill first\");\n    }\n\n    const handleSkillSelect = i => {\n      const skillArray = Array(skillNameList.length).fill(0);\n      skillArray[i] = 1;\n      setSkillProposition(skillArray);\n      setSkillSelected(skillNameList[i]);\n    };\n\n    const skillMap = [];\n\n    for (const i in skillNameList) {\n      const skillClass = skillSelected === skillNameList[i] ? PFP.skillSelected : PFP.skillNormal;\n      skillMap.push(__jsx(\"h4\", {\n        onClick: () => handleSkillSelect(i, skillNameList[i]),\n        className: skillClass,\n        key: `SKILL${i}`\n      }, skillNameList[i]));\n    }\n\n    return __jsx(\"div\", {\n      className: PFP.skillsContainer\n    }, skillMap);\n  };\n\n  const imagesHTML = () => {\n    const allImages = [];\n\n    for (const ind in imageLinkList) {\n      allImages.push(__jsx(\"div\", {\n        className: PFP.PFImageDisplayContainer,\n        key: `IL${ind}`\n      }, __jsx(\"img\", {\n        className: PFP.PFImageDisplay,\n        src: imageLinkList[ind],\n        alt: `(${imageLinkList[ind]}) failed to load`,\n        key: `IL${imageLinkList[ind]}`\n      }), __jsx(\"div\", {\n        onClick: () => removeImage(ind),\n        className: PFP.PFSkillRemove,\n        style: {\n          height: '75px',\n          lineHeight: '70px'\n        }\n      }, \"x\")));\n    }\n\n    return allImages.map(img => img);\n  };\n\n  const referenceLinksHTML = () => {\n    const allRL = [];\n\n    for (const ind in referenceLinkList) {\n      allRL.push(__jsx(\"div\", {\n        className: PFP.PFLinkContainer,\n        key: `RL${ind}`\n      }, __jsx(\"a\", {\n        href: referenceLinkList[ind],\n        className: `${PFP.PFReferenceLink} neutralize-link`\n      }, referenceLinkList[ind].split('/')[2]), __jsx(\"div\", {\n        onClick: () => removeRL(ind),\n        className: PFP.PFSkillRemove,\n        style: {\n          lineHeight: '30px'\n        }\n      }, \"x\")));\n    }\n\n    return allRL.map(rl => rl);\n  };\n\n  const groupCommType = () => {\n    const siteStats = websiteStats(groupContactLink.fields.value);\n    return __jsx(React.Fragment, null, __jsx(\"a\", {\n      className: PFP.GCLType,\n      href: groupContactLink.fields.value,\n      title: siteStats.title,\n      style: {\n        backgroundColor: siteStats.color\n      }\n    }, __jsx(\"img\", {\n      className: PFP.GCLImage,\n      src: siteStats.icon,\n      alt: siteStats.title\n    })), __jsx(\"input\", _extends({\n      className: PFP.PFSearchInputNormal,\n      id: \"PF-GC-Link\"\n    }, groupContactLink.fields, {\n      style: {\n        marginBottom: 0,\n        borderColor: siteStats.color\n      }\n    })));\n  };\n\n  const signInWarning = props.token ? null : __jsx(\"h3\", {\n    className: \"warning-container\"\n  }, \"must be signed in to add post\");\n\n  const onSuggestionClicked = skill => {\n    const skillToEnter = `${skill} `;\n    setSkillName(skillToEnter);\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Add project | Unilous\"), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"Add project | Unilous\",\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"Share your project or idea to attract possible team members.\",\n    key: \"description\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: \"Add project | Unilous\",\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Share your project or idea to attract possible team members.\",\n    key: \"description\"\n  })), __jsx(\"div\", {\n    className: \"post-form0-container\"\n  }, __jsx(\"div\", {\n    className: \"navbar-height\"\n  }), signInWarning, __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e)\n  }, __jsx(\"div\", {\n    className: PFP.postForm0Form\n  }, __jsx(\"h1\", {\n    className: \"ppFormTitle\",\n    style: {\n      textAlign: 'start',\n      marginLeft: 0\n    }\n  }, \"create post\"), __jsx(InputHeader, {\n    info: false,\n    title: \"title\",\n    color: \"white\",\n    inputFor: \"PF-title\"\n  }), __jsx(\"input\", _extends({\n    className: PFP.PFSearchInput,\n    id: \"PFTitle\"\n  }, title.fields)), __jsx(InputHeader, {\n    info: true,\n    title: \"description\",\n    color: \"white\",\n    inputFor: \"PF-description\"\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"any links starting with (https://) or (http://) get decorated like this \", __jsx(\"a\", {\n    href: \"https://www.unilous.com/post-form/\",\n    className: \"p-link neutralize-link\"\n  }, \"http://decorated-link.com\")))), __jsx(\"textarea\", _extends({\n    className: PFP.PFSearchInput,\n    id: \"PF-description\"\n  }, description.fields, {\n    style: {\n      height: '100px',\n      width: '100%'\n    }\n  })), __jsx(InputHeader, {\n    info: true,\n    title: \"color\",\n    color: \"white\",\n    inputFor: \"\"\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"used sparingly to decorate the post\"))), __jsx(\"div\", {\n    className: PFP.PFDisplayColor,\n    style: {\n      backgroundColor: pallette.color\n    }\n  }, __jsx(\"div\", {\n    className: PFP.PFDisplayPart,\n    style: {\n      backgroundColor: pallette.color,\n      color: pallette.textColor\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    }\n  }, \"primary\")), __jsx(\"div\", {\n    className: PFP.PFDisplayPart,\n    style: {\n      backgroundColor: pallette.higherColor,\n      color: pallette.textColor\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    }\n  }, \"secondary\"))), __jsx(\"div\", {\n    className: PFP.PFInputColors\n  }, colorsHTML), __jsx(InputHeader, {\n    info: true,\n    title: \"skills\",\n    color: \"white\",\n    inputFor: \"PF-skillName\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"skills needed to execute the project\"), __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"amount of people needed per skill\")), __jsx(\"div\", null, __jsx(\"div\", {\n    className: PFP.PFSkillFields\n  }, __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    placeholder: \"skill name\",\n    id: \"PF-skillName\",\n    value: skillName,\n    onChange: e => setSkillName(e.target.value),\n    type: \"text\",\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    placeholder: \"amount of help\",\n    value: skillCapacity,\n    onChange: e => setSkillCapacity(e.target.value),\n    type: \"number\",\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"div\", {\n    className: PFP.PFSkillSuggContainer\n  }, __jsx(SkillSugg, {\n    query: skillName,\n    onSuggestionClicked: onSuggestionClicked,\n    style: {\n      gridColumn: '1/2'\n    }\n  }))), __jsx(\"h4\", {\n    onClick: () => addSkills(),\n    className: `${PFP.PFFieldSubmit} standard-hover`\n  }, \"add skill\")), skillsHTML().map(s => s), __jsx(InputHeader, {\n    info: true,\n    title: \"contribution\",\n    color: \"white\",\n    inputFor: \"\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"skill you contribute to the project\")), skillContribution(), __jsx(InputHeader, {\n    info: true,\n    title: \"group/contact link\",\n    color: \"white\",\n    inputFor: \"PF-GC-Link\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"link shown to users who have been accepted to join the project\"), __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"group links recommended: \", __jsx(\"strong\", null, \"Slack\"), \", \", __jsx(\"strong\", null, \"Trello\"), \", \", __jsx(\"strong\", null, \"Discord\"), \", or \", __jsx(\"strong\", null, \"WhatsApp\")))), __jsx(\"div\", {\n    className: PFP.GCLInput\n  }, groupCommType()), __jsx(InputHeader, {\n    info: false,\n    title: \"images\",\n    color: \"white\",\n    inputFor: \"PF-imageLinks\"\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    type: \"url\",\n    placeholder: \"image link\",\n    id: \"PF-imageLinks\",\n    value: imageLink,\n    onChange: e => setImageLink(e.target.value),\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"h4\", {\n    onClick: () => addImage(),\n    className: `${PFP.PFFieldSubmit} standard-hover`\n  }, \"add image\"), __jsx(\"div\", {\n    className: PFP.PFImagesContainer\n  }, imagesHTML()), __jsx(InputHeader, {\n    info: false,\n    title: \"links\",\n    color: \"white\",\n    inputFor: \"PF-referenceLinks\"\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    type: \"url\",\n    id: \"PF-referenceLinks\",\n    value: referenceLink,\n    onChange: e => setReferenceLink(e.target.value),\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"h4\", {\n    onClick: () => addRL(),\n    className: `${PFP.PFFieldSubmit} standard-hover`\n  }, \"add link\"), referenceLinksHTML()), __jsx(\"button\", {\n    type: \"submit\",\n    className: `${PFP.PFSubmit} standard-hover`\n  }, __jsx(\"h2\", {\n    style: {\n      margin: '5px'\n    }\n  }, \"create post\")))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    alert: state.alert,\n    token: state.token,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostFormPage);","map":null,"metadata":{},"sourceType":"module"}