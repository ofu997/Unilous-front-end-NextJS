{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_POST } from '../src/schemas/mutations';\nimport { useField, triggerAlert, palletteGenerator, websiteStats } from '../src/functions/functions';\nimport PFP from '../styles/pages/postForm.module.css';\nimport { withRouter } from 'react-router-dom';\nimport InputHeader from '../components/text-field/InputHeader';\nimport { setAlert, resetAlert } from '../redux/reducers/alertNotif';\nimport SkillSugg from '../components/text-field/SkillSugg';\nimport Router from 'next/router';\nimport { bindActionCreators } from 'redux';\nimport Layout from '../components/Layout';\nimport Head from 'next/head';\n\nvar PostFormPage = function PostFormPage(props) {\n  var title = useField('text');\n  var description = useField('text');\n\n  var _useState = useState(null),\n      color = _useState[0],\n      setColor = _useState[1];\n\n  var groupContactLink = useField('url');\n\n  var _useState2 = useState(''),\n      skillName = _useState2[0],\n      setSkillName = _useState2[1];\n\n  var _useState3 = useState([]),\n      skillNameList = _useState3[0],\n      setSkillNameList = _useState3[1];\n\n  var _useState4 = useState(''),\n      skillCapacity = _useState4[0],\n      setSkillCapacity = _useState4[1];\n\n  var _useState5 = useState([]),\n      skillCapList = _useState5[0],\n      setSkillCapList = _useState5[1];\n\n  var _useState6 = useState(''),\n      imageLink = _useState6[0],\n      setImageLink = _useState6[1];\n\n  var _useState7 = useState([]),\n      imageLinkList = _useState7[0],\n      setImageLinkList = _useState7[1];\n\n  var _useState8 = useState(''),\n      referenceLink = _useState8[0],\n      setReferenceLink = _useState8[1];\n\n  var _useState9 = useState([]),\n      referenceLinkList = _useState9[0],\n      setReferenceLinkList = _useState9[1];\n\n  var _useState10 = useState(null),\n      skillProposition = _useState10[0],\n      setSkillProposition = _useState10[1];\n\n  var _useState11 = useState(null),\n      skillSelected = _useState11[0],\n      setSkillSelected = _useState11[1];\n\n  var handleError = function handleError(e) {\n    var message = e.message;\n\n    if (message.includes('Response not successful')) {\n      triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `title` (')) {\n      triggerAlert('warning', \"title$: title of \".concat(title.fields.value.length, \" characters must only have at most 100 characters\"), props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('dup key: { title')) {\n      triggerAlert('warning', \"title$: \".concat(title.fields.value, \" is not unique. Title must be unique\"), props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate description')) {\n      triggerAlert('warning', \"description$: description is not unique. Description must be unique\", props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('minimum allowed length')) {\n      triggerAlert('warning', \"description$: description of \".concat(description.fields.value.length, \" characters must at least have 100 characters\"), props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('Path `description` (')) {\n      triggerAlert('warning', \"description$: description of \".concat(description.fields.value.length, \" characters must only have at most 3000 characters\"), props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (message.includes('duplicate contactLink')) {\n      triggerAlert('warning', \"group/contact link$: \".concat(groupContactLink.fields.value, \" is not unique. Group/contact link must be unique\"), props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    console.log(e);\n  };\n\n  var _useMutation = useMutation(CREATE_POST, {\n    onError: handleError\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createPost = _useMutation2[0];\n\n  var pallette = color ? palletteGenerator(color).colorPallette : {\n    color: null,\n    heigherColor: null\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var cleanedTitle, _iterator, _step, word, postCreated;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (props.token) {\n                _context.next = 4;\n                break;\n              }\n\n              triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n              return _context.abrupt(\"return\", null);\n\n            case 4:\n              if (!(!skillNameList.length || !groupContactLink.fields.value.length)) {\n                _context.next = 7;\n                break;\n              }\n\n              triggerAlert('warning', 'all$: title, description, color, group/contact link, skills, and contribution are all required', props.setAlert, props.resetAlert);\n              return _context.abrupt(\"return\", null);\n\n            case 7:\n              cleanedTitle = [];\n              _iterator = _createForOfIteratorHelper(title.fields.value.split(' '));\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  word = _step.value;\n                  if (word.length) cleanedTitle.push(word);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              _context.next = 12;\n              return createPost({\n                variables: {\n                  title: cleanedTitle.join(' '),\n                  user: props.currentUser._id,\n                  skillNames: skillNameList,\n                  skillCapacities: skillCapList,\n                  skillFills: skillProposition,\n                  description: description.fields.value,\n                  contactLink: groupContactLink.fields.value,\n                  color: color,\n                  imageLinks: imageLinkList,\n                  referenceLinks: referenceLinkList\n                }\n              });\n\n            case 12:\n              postCreated = _context.sent;\n\n              if (postCreated) {\n                title.reset();\n                description.reset();\n                groupContactLink.reset();\n                setSkillName('');\n                setSkillNameList([]);\n                setSkillCapacity('');\n                setSkillCapList([]);\n                setImageLink('');\n                setImageLinkList([]);\n                setReferenceLink('');\n                setReferenceLinkList([]);\n                console.log('SUBMITTED');\n                Router.push(\"/post/\".concat(encodeURIComponent(postCreated.data.addPost.title)));\n              }\n\n              console.log('FAILED', postCreated);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var colors = ['rgb(199,0,57)', 'rgb(224,52,77)', 'rgb(245,165,0)', 'rgb(250,116,79)', 'rgb(246,172,200)', 'rgb(16,79,37)', 'rgb(15,138,95)', 'rgb(140,186,81)', 'rgb(152,183,49)', 'rgb(127,205,145)', 'rgb(2,66,73)', 'rgb(15,76,117)', 'rgb(50,62,221)', 'rgb(1,152,173)', 'rgb(113,112,255)', 'rgb(20,20,20)', 'rgb(60,60,60)', 'rgb(133,156,177)'];\n  var colorsHTML = colors.map(function (c) {\n    return __jsx(\"div\", {\n      onClick: function onClick() {\n        return setColor(c);\n      },\n      className: PFP.colorIns,\n      style: {\n        backgroundColor: c\n      },\n      key: \"PFC\".concat(c)\n    });\n  });\n\n  var addSkills = function addSkills() {\n    var cleanedSkill = [];\n\n    var _iterator2 = _createForOfIteratorHelper(skillName.split(' ')),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var word = _step2.value;\n        if (word.length) cleanedSkill.push(word);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    setSkillName(cleanedSkill.join(' '));\n\n    if (Number(skillCapacity)) {\n      setSkillNameList(skillNameList.concat(skillName.toLowerCase()));\n      setSkillName('');\n      setSkillCapList(skillCapList.concat(Number(skillCapacity)));\n      setSkillCapacity('');\n      setSkillProposition(null);\n      setSkillSelected(null);\n    }\n  };\n\n  var removeSkill = function removeSkill(ind) {\n    var newSkillNameList = [];\n\n    for (var i in skillNameList) {\n      if (i !== ind) {\n        newSkillNameList.push(skillNameList[i]);\n      }\n    }\n\n    setSkillNameList(newSkillNameList);\n    var newSkillCapList = [];\n\n    for (var _i in skillCapList) {\n      if (_i !== ind) {\n        newSkillCapList.push(skillCapList[_i]);\n      }\n    }\n\n    setSkillCapList(newSkillCapList);\n    var newSkillProposition = [];\n\n    for (var _i2 in props.skillProposition) {\n      if (_i2 !== ind) {\n        newSkillProposition.push(props.skillProposition[_i2]);\n      }\n    }\n  };\n\n  var removeImage = function removeImage(ind) {\n    var newImageLinkList = [];\n\n    for (var i in imageLinkList) {\n      if (i !== ind) {\n        newImageLinkList.push(imageLinkList[i]);\n      }\n    }\n\n    setImageLinkList(newImageLinkList);\n  };\n\n  var addImage = function addImage() {\n    if (imageLink.includes('https://') || imageLink.includes('http://')) {\n      setImageLinkList(imageLinkList.concat(imageLink));\n      setImageLink('');\n    }\n  };\n\n  var removeRL = function removeRL(ind) {\n    var newReferenceLinkList = [];\n\n    for (var i in referenceLinkList) {\n      if (i !== ind) {\n        newReferenceLinkList.push(referenceLinkList[i]);\n      }\n    }\n\n    setReferenceLinkList(newReferenceLinkList);\n  };\n\n  var addRL = function addRL() {\n    if (referenceLink.includes('https://') || referenceLink.includes('http://')) {\n      setReferenceLinkList(referenceLinkList.concat(referenceLink));\n      setReferenceLink('');\n    }\n  };\n\n  var skillsHTML = function skillsHTML() {\n    var skillsHTML = [];\n\n    var _loop = function _loop(ind) {\n      skillsHTML.push(__jsx(\"div\", {\n        className: PFP.PFSkillWrapper,\n        key: \"PFS\".concat(skillNameList[ind])\n      }, __jsx(\"div\", {\n        className: PFP.PFSkillContainer\n      }, __jsx(\"div\", {\n        className: PFP.PFSkillName\n      }, skillNameList[ind]), __jsx(\"div\", {\n        className: PFP.PFSkillCap\n      }, skillCapList[ind])), __jsx(\"div\", {\n        className: PFP.PFSkillRemove,\n        onClick: function onClick() {\n          return removeSkill(ind);\n        }\n      }, \"x\")));\n    };\n\n    for (var ind in skillNameList) {\n      _loop(ind);\n    }\n\n    return skillsHTML;\n  };\n\n  var skillContribution = function skillContribution() {\n    if (!skillNameList.length) {\n      return __jsx(\"h4\", {\n        className: PFP.PFInputTitle,\n        style: {\n          opacity: 0.7\n        }\n      }, \"must add skill first\");\n    }\n\n    var handleSkillSelect = function handleSkillSelect(i) {\n      var skillArray = Array(skillNameList.length).fill(0);\n      skillArray[i] = 1;\n      setSkillProposition(skillArray);\n      setSkillSelected(skillNameList[i]);\n    };\n\n    var skillMap = [];\n\n    var _loop2 = function _loop2(i) {\n      var skillClass = skillSelected === skillNameList[i] ? PFP.skillSelected : PFP.skillNormal;\n      skillMap.push(__jsx(\"h4\", {\n        onClick: function onClick() {\n          return handleSkillSelect(i, skillNameList[i]);\n        },\n        className: skillClass,\n        key: \"SKILL\".concat(i)\n      }, skillNameList[i]));\n    };\n\n    for (var i in skillNameList) {\n      _loop2(i);\n    }\n\n    return __jsx(\"div\", {\n      className: PFP.skillsContainer\n    }, skillMap);\n  };\n\n  var imagesHTML = function imagesHTML() {\n    var allImages = [];\n\n    var _loop3 = function _loop3(ind) {\n      allImages.push(__jsx(\"div\", {\n        className: PFP.PFImageDisplayContainer,\n        key: \"IL\".concat(ind)\n      }, __jsx(\"img\", {\n        className: PFP.PFImageDisplay,\n        src: imageLinkList[ind],\n        alt: \"(\".concat(imageLinkList[ind], \") failed to load\"),\n        key: \"IL\".concat(imageLinkList[ind])\n      }), __jsx(\"div\", {\n        onClick: function onClick() {\n          return removeImage(ind);\n        },\n        className: PFP.PFSkillRemove,\n        style: {\n          height: '75px',\n          lineHeight: '70px'\n        }\n      }, \"x\")));\n    };\n\n    for (var ind in imageLinkList) {\n      _loop3(ind);\n    }\n\n    return allImages.map(function (img) {\n      return img;\n    });\n  };\n\n  var referenceLinksHTML = function referenceLinksHTML() {\n    var allRL = [];\n\n    var _loop4 = function _loop4(ind) {\n      allRL.push(__jsx(\"div\", {\n        className: PFP.PFLinkContainer,\n        key: \"RL\".concat(ind)\n      }, __jsx(\"a\", {\n        href: referenceLinkList[ind],\n        className: \"\".concat(PFP.PFReferenceLink, \" neutralize-link\")\n      }, referenceLinkList[ind].split('/')[2]), __jsx(\"div\", {\n        onClick: function onClick() {\n          return removeRL(ind);\n        },\n        className: PFP.PFSkillRemove,\n        style: {\n          lineHeight: '30px'\n        }\n      }, \"x\")));\n    };\n\n    for (var ind in referenceLinkList) {\n      _loop4(ind);\n    }\n\n    return allRL.map(function (rl) {\n      return rl;\n    });\n  };\n\n  var groupCommType = function groupCommType() {\n    var siteStats = websiteStats(groupContactLink.fields.value);\n    return __jsx(React.Fragment, null, __jsx(\"a\", {\n      className: PFP.GCLType,\n      href: groupContactLink.fields.value,\n      title: siteStats.title,\n      style: {\n        backgroundColor: siteStats.color\n      }\n    }, __jsx(\"img\", {\n      className: PFP.GCLImage,\n      src: siteStats.icon,\n      alt: siteStats.title\n    })), __jsx(\"input\", _extends({\n      className: PFP.PFSearchInputNormal,\n      id: \"PF-GC-Link\"\n    }, groupContactLink.fields, {\n      style: {\n        marginBottom: 0,\n        borderColor: siteStats.color\n      }\n    })));\n  };\n\n  var signInWarning = props.token ? null : __jsx(\"h3\", {\n    className: \"warning-container\"\n  }, \"must be signed in to add post\");\n\n  var onSuggestionClicked = function onSuggestionClicked(skill) {\n    var skillToEnter = \"\".concat(skill, \" \");\n    setSkillName(skillToEnter);\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Add project | Unilous\"), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"Add project | Unilous\",\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"Share your project or idea to attract possible team members.\",\n    key: \"description\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: \"Add project | Unilous\",\n    key: \"title\"\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Share your project or idea to attract possible team members.\",\n    key: \"description\"\n  })), __jsx(\"div\", {\n    className: \"post-form0-container\"\n  }, __jsx(\"div\", {\n    className: \"navbar-height\"\n  }), signInWarning, __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      return handleSubmit(e);\n    }\n  }, __jsx(\"div\", {\n    className: PFP.postForm0Form\n  }, __jsx(\"h1\", {\n    className: \"ppFormTitle\",\n    style: {\n      textAlign: 'start',\n      marginLeft: 0\n    }\n  }, \"create post\"), __jsx(InputHeader, {\n    info: false,\n    title: \"title\",\n    color: \"white\",\n    inputFor: \"PF-title\"\n  }), __jsx(\"input\", _extends({\n    className: PFP.PFSearchInput,\n    id: \"PFTitle\"\n  }, title.fields)), __jsx(InputHeader, {\n    info: true,\n    title: \"description\",\n    color: \"white\",\n    inputFor: \"PF-description\"\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"any links starting with (https://) or (http://) get decorated like this \", __jsx(\"a\", {\n    href: \"https://www.unilous.com/post-form/\",\n    className: \"p-link neutralize-link\"\n  }, \"http://decorated-link.com\")))), __jsx(\"textarea\", _extends({\n    className: PFP.PFSearchInput,\n    id: \"PF-description\"\n  }, description.fields, {\n    style: {\n      height: '100px',\n      width: '100%'\n    }\n  })), __jsx(InputHeader, {\n    info: true,\n    title: \"color\",\n    color: \"white\",\n    inputFor: \"\"\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"used sparingly to decorate the post\"))), __jsx(\"div\", {\n    className: PFP.PFDisplayColor,\n    style: {\n      backgroundColor: pallette.color\n    }\n  }, __jsx(\"div\", {\n    className: PFP.PFDisplayPart,\n    style: {\n      backgroundColor: pallette.color,\n      color: pallette.textColor\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    }\n  }, \"primary\")), __jsx(\"div\", {\n    className: PFP.PFDisplayPart,\n    style: {\n      backgroundColor: pallette.higherColor,\n      color: pallette.textColor\n    }\n  }, __jsx(\"h4\", {\n    style: {\n      margin: 'auto'\n    }\n  }, \"secondary\"))), __jsx(\"div\", {\n    className: PFP.PFInputColors\n  }, colorsHTML), __jsx(InputHeader, {\n    info: true,\n    title: \"skills\",\n    color: \"white\",\n    inputFor: \"PF-skillName\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"skills needed to execute the project\"), __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"amount of people needed per skill\")), __jsx(\"div\", null, __jsx(\"div\", {\n    className: PFP.PFSkillFields\n  }, __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    placeholder: \"skill name\",\n    id: \"PF-skillName\",\n    value: skillName,\n    onChange: function onChange(e) {\n      return setSkillName(e.target.value);\n    },\n    type: \"text\",\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    placeholder: \"amount of help\",\n    value: skillCapacity,\n    onChange: function onChange(e) {\n      return setSkillCapacity(e.target.value);\n    },\n    type: \"number\",\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"div\", {\n    className: PFP.PFSkillSuggContainer\n  }, __jsx(SkillSugg, {\n    query: skillName,\n    onSuggestionClicked: onSuggestionClicked,\n    style: {\n      gridColumn: '1/2'\n    }\n  }))), __jsx(\"h4\", {\n    onClick: function onClick() {\n      return addSkills();\n    },\n    className: \"\".concat(PFP.PFFieldSubmit, \" standard-hover\")\n  }, \"add skill\")), skillsHTML().map(function (s) {\n    return s;\n  }), __jsx(InputHeader, {\n    info: true,\n    title: \"contribution\",\n    color: \"white\",\n    inputFor: \"\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"skill you contribute to the project\")), skillContribution(), __jsx(InputHeader, {\n    info: true,\n    title: \"group/contact link\",\n    color: \"white\",\n    inputFor: \"PF-GC-Link\"\n  }, __jsx(\"p\", {\n    style: {\n      margin: 0,\n      marginBottom: '5px'\n    }\n  }, \"link shown to users who have been accepted to join the project\"), __jsx(\"ul\", {\n    style: {\n      margin: 0\n    }\n  }, __jsx(\"li\", null, \"group links recommended: \", __jsx(\"strong\", null, \"Slack\"), \", \", __jsx(\"strong\", null, \"Trello\"), \", \", __jsx(\"strong\", null, \"Discord\"), \", or \", __jsx(\"strong\", null, \"WhatsApp\")))), __jsx(\"div\", {\n    className: PFP.GCLInput\n  }, groupCommType()), __jsx(InputHeader, {\n    info: false,\n    title: \"images\",\n    color: \"white\",\n    inputFor: \"PF-imageLinks\"\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    type: \"url\",\n    placeholder: \"image link\",\n    id: \"PF-imageLinks\",\n    value: imageLink,\n    onChange: function onChange(e) {\n      return setImageLink(e.target.value);\n    },\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"h4\", {\n    onClick: function onClick() {\n      return addImage();\n    },\n    className: \"\".concat(PFP.PFFieldSubmit, \" standard-hover\")\n  }, \"add image\"), __jsx(\"div\", {\n    className: PFP.PFImagesContainer\n  }, imagesHTML()), __jsx(InputHeader, {\n    info: false,\n    title: \"links\",\n    color: \"white\",\n    inputFor: \"PF-referenceLinks\"\n  }), __jsx(\"input\", {\n    className: PFP.PFSearchInput,\n    type: \"url\",\n    id: \"PF-referenceLinks\",\n    value: referenceLink,\n    onChange: function onChange(e) {\n      return setReferenceLink(e.target.value);\n    },\n    style: {\n      marginBottom: 0\n    }\n  }), __jsx(\"h4\", {\n    onClick: function onClick() {\n      return addRL();\n    },\n    className: \"\".concat(PFP.PFFieldSubmit, \" standard-hover\")\n  }, \"add link\"), referenceLinksHTML()), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"\".concat(PFP.PFSubmit, \" standard-hover\")\n  }, __jsx(\"h2\", {\n    style: {\n      margin: '5px'\n    }\n  }, \"create post\")))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    alert: state.alert,\n    token: state.token,\n    currentUser: state.currentUser\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostFormPage);","map":null,"metadata":{},"sourceType":"module"}