{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { setCurrentUser, setPendingNotifications, setCurrentUserNotifications } from '../redux/reducers/currentUser';\nimport { setToken } from '../redux/reducers/token';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport NavBar from './navBar/NavBar';\nimport { FIND_USER, PENDING_NOTIFS, LIST_OF_NOTIFICATIONS } from '../src/schemas/queries';\nimport { bindActionCreators } from 'redux';\n\nconst Layout = props => {\n  if (true) return __jsx(\"h1\", null, \"Rendering\");else {\n    const {\n      0: query,\n      1: setQuery\n    } = useState('');\n\n    const onQueryChange = event => {\n      setQuery(event.target.value);\n    };\n\n    if (localStorage.getItem('token') && props.token === null) {\n      props.setToken(localStorage.getItem('token'));\n    }\n\n    const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake';\n    const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\n      variables: {\n        userId: currentUserId\n      }\n    });\n    const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake';\n    const userQuery = useQuery(FIND_USER, {\n      variables: {\n        username: currentUserUN\n      }\n    });\n    const userNotifs = props.currentUser ? props.currentUser.notifications.map(n => n._id) : [];\n    const notifsQuery = useQuery(LIST_OF_NOTIFICATIONS, {\n      variables: {\n        notifications: userNotifs\n      }\n    });\n\n    const notifsQueryConditions = () => {\n      if (!notifsQuery.data) return null;\n      if (!props.currentUser) return null;\n      if (notifsQuery.loading) return null;\n      if (notifsQuery.data.listOfNotifications.length < 1) return null;\n      if (!props.currentUser.notifications.length) return null;\n      if (props.currentUser.notifications[0].userFrom) return null;\n      return notifsQuery.data.listOfNotifications;\n    };\n\n    const pendingNotifsConditions = () => {\n      if (!pendingNotifsQuery.data) return null;\n      if (props.currentUser && props.currentUser.pendingNotifications) return null;\n      return pendingNotifsQuery.data.searchAwaitingNotifs;\n    };\n\n    const userConditions = (query, reducer) => {\n      if (!query.data) return null;\n      if (!query.data.findUser) return null;\n      if (reducer) return null;\n      return query.data.findUser;\n    };\n\n    const notifsFilled = notifsQueryConditions();\n    const pendingNotifs = pendingNotifsConditions();\n    const user = userConditions(userQuery, props.currentUser);\n    useEffect(() => {\n      if (user) {\n        props.setCurrentUser(user);\n      }\n\n      if (pendingNotifs) {\n        props.setPendingNotifications(pendingNotifs);\n      }\n\n      if (notifsFilled) {\n        props.setCurrentUserNotifications(notifsFilled);\n      }\n    }, [notifsFilled, props.setCurrentUserNotifications, user, props.setCurrentUser, pendingNotifs, props.setPendingNotifications, props]);\n    return __jsx(\"div\", {\n      className: \"wrapper\"\n    }, __jsx(NavBar, {\n      query: query,\n      onQueryChange: onQueryChange\n    }), props.children);\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setToken: bindActionCreators(setToken, dispatch),\n    setCurrentUser: bindActionCreators(setCurrentUser, dispatch),\n    setPendingNotifications: bindActionCreators(setPendingNotifications, dispatch),\n    setCurrentUserNotifications: bindActionCreators(setCurrentUserNotifications, dispatch)\n  };\n};\n\nsetCurrentUser;\nsetPendingNotifications;\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","map":null,"metadata":{},"sourceType":"module"}